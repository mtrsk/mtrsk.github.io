<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on Benevide&#39;s Blog</title>
    <link>https://mtrsk.github.io/categories/notes/</link>
    <description>Recent content in Notes on Benevide&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Jun 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mtrsk.github.io/categories/notes/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Monad</title>
      <link>https://mtrsk.github.io/notes/2024/monad/</link>
      <pubDate>Wed, 19 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/notes/2024/monad/</guid>
      <description>:ID: a3e972e0-8db9-4556-9dca-0e4f6a663236&#xA;Haskell class Monad m where (&amp;gt;&amp;gt;=) :: m a -&amp;gt; ( a -&amp;gt; m b) -&amp;gt; m b (&amp;gt;&amp;gt;) :: m a -&amp;gt; m b -&amp;gt; m b return :: a -&amp;gt; m a Name Handles Signature Result Errors Either e a -&amp;gt; (a -&amp;gt; Either e b) -&amp;gt; Either e b Maybe Absent values Maybe a -&amp;gt; (a -&amp;gt; Maybe b) -&amp;gt; Maybe b IO Pure/Impure separation IO a -&amp;gt; (a -&amp;gt; IO b) -&amp;gt; IO b State Monadic State State a -&amp;gt; (a -&amp;gt; State b) -&amp;gt; State b Reader Environment Data Reader a -&amp;gt; (a -&amp;gt; Reader b) -&amp;gt; Reader b Writer Writer-Only Data Writer a -&amp;gt; (a -&amp;gt; Writer b) -&amp;gt; Writer b Parser Composing Parsers Parser a -&amp;gt; (a -&amp;gt; Parser b) -&amp;gt; Parser b </description>
    </item>
    <item>
      <title>Monoid</title>
      <link>https://mtrsk.github.io/notes/2023/monoid/</link>
      <pubDate>Sun, 08 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/notes/2023/monoid/</guid>
      <description>:ID: d89285be-d7a9-46a1-8a10-e14e73b66935&#xA;Definition A monoid is triple \(\left (\mathbb{M}, \cdot, 1 \right)\) such that:&#xA;\(\mathbb{M}\) is an non-empty set \(\cdot : \mathbb{M} \times \mathbb{M} \rightarrow \mathbb{M}\) is an associative mapping, i.e., \(\forall t_1, t_2, t_3 \in \mathbb{M}, (t_1 \cdot t_2) \cdot t_3 = t_1 \cdot (t_2 \cdot t_3)\). \(1 \in \mathbb{M}\) is the unit satisfying \(1 \cdot t = t = t \cdot 1, \forall t \in \mathbb{M}\). </description>
    </item>
    <item>
      <title>Left R-Module</title>
      <link>https://mtrsk.github.io/notes/2023/left-r-module/</link>
      <pubDate>Sat, 07 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/notes/2023/left-r-module/</guid>
      <description>:ID: e4bd8f7b-a64d-4da3-b1e8-289d6fb0c441&#xA;Formal Definition Suppose that R is a ring, and 1 is its multiplicative identity. A left R-module M consists of an abelian group (M, +) and an operation · : R × M → M such that ∀ r, s ∈ R and x, y ∈ M, we have:&#xA;\begin{align*} r \cdot (x + y) &amp;amp;= r \cdot x + r \cdot y \tag{1}\\ (r + s) \cdot x &amp;amp;= r \cdot x + s \cdot x \tag{2}\\ (r \cdot s) \cdot x &amp;amp;= r \cdot (s \cdot x) \tag{3}\\ 1 \cdot x &amp;amp;= x \tag{4} \end{align*}</description>
    </item>
    <item>
      <title>Managing a Programming Project</title>
      <link>https://mtrsk.github.io/notes/2023/managing-a-programming-project/</link>
      <pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/notes/2023/managing-a-programming-project/</guid>
      <description>:ID: da4d5031-66cb-4d1c-b8cf-24d12adf5c17&#xA;Introduction Your ground rules Adopt a set of unambiguous definitions and stick with them Define your project&amp;rsquo;s development cycle and related all schedules and work process to that cycle Define activities, such as levels of testing, in a consistent way Define a system of documents clearly, consistent and early Your contract Half the horror stories about programming involve either bad contracts or no contract at all&#xA;The fact that you are managing a programming project means that you will be running a business.</description>
    </item>
    <item>
      <title>Distributed Systems</title>
      <link>https://mtrsk.github.io/notes/2021/distributed-systems/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/notes/2021/distributed-systems/</guid>
      <description>:ID: d7efb05f-fb8f-438c-b09d-ea91dc24ebc3&#xA;Readings from the following books:&#xA;Michael L. Perry&amp;rsquo;s &amp;ldquo;The Art of Immutable Architecture&amp;rdquo;. Properties of a reliable application&#xA;Idempotence Immutability Local Independence Versioning Why Immutable Architecture ..if you are in architecture, you are responsible for cutting the Gordian Knot of possible failures and mitigations. This is the fragile process by which we build the systems that run our society.&#xA;The Problems with Immutability It&amp;rsquo;s not how machines actually operate, i.</description>
    </item>
    <item>
      <title>History of Logic: From Aristotle to Taski</title>
      <link>https://mtrsk.github.io/notes/2021/history-of-logic-from-aristotle-to-taski/</link>
      <pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/notes/2021/history-of-logic-from-aristotle-to-taski/</guid>
      <description>:ID: 0c082d02-4771-4860-8119-83b263c00ff3&#xA;Notes from the book &amp;ldquo;History of Logic: from Aristotle to Tarski&amp;rdquo;.&#xA;Intro Roughly speaking, the development of logic in Europe has had three &amp;ldquo;golden ages&amp;rdquo;:&#xA;Greek period, from around 350 to 200 BCE and included thinkers like: Aristotle Diodoru Cronus Chrysippus High medieval period, from around 1100 to 1400 Modern period, from around 1850 up to the present day The Greek period From the beginning of the Greek golden period we get many anticipations of later developments.</description>
    </item>
  </channel>
</rss>
