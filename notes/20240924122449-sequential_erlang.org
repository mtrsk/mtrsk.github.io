:PROPERTIES:
:ID:       f0da3356-3797-4ddc-8306-cd333f159754
:EXPORT_HUGO_CATEGORIES: "FP"
:EXPORT_HUGO_TAGS: "Erlang"
:END:
#+title: Sequential Erlang

The basic constructs of the [[id:de7d0e94-618f-4982-b3e5-8806d88cad5d][Erlang]] language.

* Datatypes

** Integers
+ Large Integers are converted to ~bignums~

#+BEGIN_QUOTE
    If you need to do calculations on integers using a base other than 10, you can use
    Base#Value notation. [cite:@laurent2017 p.7]
#+END_QUOTE

** Floats

+ When you divide two integers with ~/~, the result is automatically converted to a floating-point number.
+ Integer division is handled by ~div~ and ~rem~.

** Atoms
+ In Erlang, atoms are used to represent constant values.
+ Atoms are also global, and this is achieved without the use of macro
  definitions or include files.

** Tuples
+ Represents a collection of elements (of any type) that are grouped together.
+ Access is normally done by position.
+ A tuple whose first element is an atom is called a ~tagged~ tuple, i.e., ~{book,
  "The Aleph"}~.

#+BEGIN_QUOTE
Tuples are created automatically when we declare them and are destroyed when
they can no longer be used. Erlang uses a garbage collector to reclaim all
unused memory, so we don’t have to worry about memory
allocation. [cite:@armstrong2013 p.35]
#+END_QUOTE

You can also pattern match tuples by using free variables:
#+BEGIN_SRC shell
  1> Point = {point, 10, 45}.
  {point,10,45}
  2> {point, X, Y} = Point.
  {point,10,45}
  3> X.
  10
  4> Y.
  45
#+END_SRC

** Lists
+ A list is a compound data type with a variable number of terms:
  ~[Term1,...,TermN]~.
+ Access is normally done by parttern matching.
+ One can add or iterate over lists with the ~cons~ operator ~|~, which breaks a
  list into ~H|T~ (~head~ and ~tail~),

#+BEGIN_SRC 
  List = [ Element | List ] OR []
#+END_SRC

*** List Comprehensions

#+BEGIN_SRC shell
  1> L = [1,2,3,4,5,6,7].
  [1,2,3,4,5,6,7]
  2> [ 2*X || X <- L ].
  [2,4,6,8,10,12,14]
  3> 
#+END_SRC

#+BEGIN_QUOTE
The most general form of a list comprehension is an expression of the following
form: ~[X || Qualifier1, Qualifier2, ...]~, where ~X~ is an arbitrary expression,
and each qualifier is either a generator, a bitstring generator, or a filter.

+ Generators are written as ~Pattern <- ListExpr~ where ~ListExpr~ must be an expression that evaluates to a list of terms.
+ Bitstring generators are written as ~BitStringPattern <= BitStringExpr~ where ~BitStringExpr~ must be an expression that evaluates to a bitstring.
+ Filters are either predicates or boolean expressions. [cite:@armstrong2013 p.61]
#+END_QUOTE

** Strings

#+BEGIN_QUOTE
Strictly speaking, there are no strings in Erlang. To represent a string in
Erlang, we can choose between representing the string as a list of integers or
as a binary. When a string is represented as a list of integers, each element in
the list represents a Unicode codepoint.
#+END_QUOTE

To print a unicode string one must use the "t" modifier applied to the "s"
control character in a formatting string, it accepts all Unicode codepoints and
expect binaries to be in UTF-8:

#+BEGIN_SRC shell
  1> X = "a\x{221e}b".
  [97,8734,98]
  2> io:format("~ts~n",[X]).
  a∞b
  ok
#+END_SRC

** Records

#+BEGIN_QUOTE
(...) records provide a convenient way for associating a tag
with each of the elements in a tuple. This allows us to refer to an
element of a tuple by name and not by position. A pre-compiler
takes the record definition and replaces it with the appropriate tuple
reference. [cite:@armstrong2013]
#+END_QUOTE

#+BEGIN_SRC erlang
  -record(todo, {status=reminder,who=joe,text}).
#+END_SRC

to load a record from the the shell, one must use the ~rr~ command:

#+BEGIN_SRC shell
  1> rr("records.hrl").
  [todo]
  2> #todo{}.
  #todo{status = reminder,who = joe,text = undefined}
  3> X1 = #todo{status=urgent, text="Fix errata in book"}.
  #todo{status = urgent,who = joe,text = "Fix errata in book"}
  4> X2 = X1#todo{status=done}.
  #todo{status = done,who = joe,text = "Fix errata in book"}
#+END_SRC

** Maps

Maps are associative collections of key-value pairs.

#+BEGIN_SRC shell
  1> TaskPending = #{ status => pending, description => 'feed cats' }.
  #{status => pending,description => 'feed cats'}
  2> TaskDone = TaskPending#{ status := done }.
  #{status => done,description => 'feed cats'}
#+END_SRC

* Variables

#+BEGIN_QUOTE
Note that Erlang variables start with uppercase characters. So, ~X~, ~This~, and
~A_long_name~ are all variables. Names beginning with lowercase letters—for example,
~monday~ or ~friday~ are not variables but are symbolic constants called 
atoms. [cite:@armstrong2013]
#+END_QUOTE 

+ Erlang Variables Do Not Vary
+ The scope of a variable is the lexical unit in which it is defined.
+ Variables acquire values as the result of a successful pattern matching
  operation (~=~).

* Pattern Matching
Pattern matching is used for:
+ Assigning values to variables
+ Redirecting execution flows

*** case and if Expressions

#+BEGIN_SRC erlang
  case Expression of
    Pattern1 [when Guard1] -> Expr_seq1;
    Pattern2 [when Guard2] -> Expr_seq2;
    ...
  end

  if
    Guard1 -> Expr_seq1;
    Guard2 -> Expr_seq2;
    ...
  end
#+END_SRC

* Functions

** Built-in Functions
+ Conventionally, these are part of the ~erlang~ module.
+ Mostly written in C for fast execution.

*** List of BiFs

+ ~date()~
+ ~time()~
+ ~length(List)~
+ ~size(Tuple)~
+ ~atom_to_list(Atom)~
+ ~list_to_tuple(List)~
+ ~integer_to_list(1000)~
+ ~tuple_to_list(Tuple)~

** Funs: The Basic Unit of Abstraction

~Funs~ are function closures. ~Funs~ are created by expressions of the form: ~fun(...) -> ... end~.

*** Defining Your Own Control Abstractions
If we want additional control structures, we can make our own. Erlang has no for loop, so let’s make one:
#+BEGIN_SRC erlang
  for(Max, Max, F) -> [F(Max)];
  for(I, Max, F) -> [F(I)|for(I+1, Max, F)].
#+END_SRC

** Recursion
*** Tail Recursion

* Guards

* Modules

** Defining Modules

#+BEGIN_SRC erlang
    -module(drop).
    -export([fall_velocity/1, mps_to_mph/1, mps_to_kph/1]).

    fall_velocity(Distance) -> math:sqrt(2 * 9.8 * Distance).
    mps_to_mph(Mps) -> 2.23693629 * Mps.
    mps_to_kph(Mps) -> 3.6 * Mps.
#+END_SRC
