:PROPERTIES:
:ID:       63607e63-4428-4578-bf2a-12a49649b49c
:END:
#+title: Concurrent Erlang
#+HUGO_CATEGORIES: "Functional Programming"
#+HUGO_TAGS: "Erlang"
#+STARTUP: inlineimages

#+BEGIN_QUOTE
Iâ€™m sure youâ€™ve met processes before, but only in the context of operating
systems. In Erlang, processes belong to the programming language and not the
operating system. This means that Erlang processes will have the same logical
behavior on any operating system, so we can write portable concurrent code that
can run on any operating system that supports Erlang.

In Erlang:
+ Creating and destroying processes is very fast.
+ Sending messages between processes is very fast.
+ Processes behave the same way on all operating systems.
+ We can have very large numbers of processes.
+ Processes share no memory and are completely independent.
+ The only way for processes to interact is through message passing.
[cite:@armstrong2013 p.181]
#+END_QUOTE


* Processes

In [[id:de7d0e94-618f-4982-b3e5-8806d88cad5d][Erlang]], creation of a parallel process is achieved by evaluating the ~spawn~
primitive. This primitive creates a concurrent process and returns a process
identifier (PID) that can used to interact with the newly created process:

#+BEGIN_SRC erlang
Pid = spawn(ModName, FuncName, [Arg1, Arg2, ..., ArgN]).
#+END_SRC

#+NAME: erlang-spawn
#+BEGIN_SRC dot :file ../static/img/notes/erlang_spawn.png :cmdline -Kdot -Tpng :exports results
  digraph Spawn {
    node [shape=circle];
    sep = 1;

    pid1 [label="Pid 1", fontsize="10pt", style=filled, fillcolor=grey];
    pid2 [label="Pid 2", xlabel="Mod:Func(Args)", fontsize="10pt", style=filled, fillcolor=white];

    pid1 -> pid2 [label="  Spawn(Mod, Func, Args)", fontsize="10pt", minlen=1, style=dashed];
  }
#+END_SRC

#+RESULTS: erlang-spawn
[[file:../static/img/notes/erlang_spawn.png]]

+ This BIF never fails
+ A process can either terminate:
  * Abormally when run-time errors occur
  * Normally when there is no more code to execute

** Modeling Concurrency

#+NAME: erlang-send
#+BEGIN_SRC dot :file ../static/img/notes/erlang_send.png :cmdline -Kdot -Tpng :exports results
  digraph Send {
    node [shape=circle];
    rankdir="LR";

    pid1 [label="Pid 1", xlabel="Pid2 ! { self(), hello }", fontsize="10pt", style=filled, fillcolor=grey];
    pid2 [label="Pid 2", fontsize="10pt", style=filled, fillcolor=white, xlabel="receive (...) end." ];

    pid1 -> pid2 [label="{ Pid1, hello }", fontsize="10pt", style=dashed];
  }
#+END_SRC

#+RESULTS: erlang-send
[[file:../static/img/notes/erlang_send.png]]

The syntax ~Pid ! Msg~ means "send the message ~Msg~ to the process ~Pid~", where ~Msg~
is from any valid [[id:de7d0e94-618f-4982-b3e5-8806d88cad5d][Erlang]] data type. Also, ~Pid1 ! Pid2 ! ... ! Msg~ means send the
message Msg to all the processes ~Pid1~, ~Pid2~, and so on. The ~receive ... end~
construct is used for a process to read a message that has been sent:

#+BEGIN_SRC erlang
receive
   Pattern1 [when Guard1] -> Expression1;
   Pattern2 [when Guard2] -> Expression2;
   ...
end
#+END_SRC

+ Sending a message will never fail.
+ A message sent to non-existing processes are throw away.
+ Received messages are store in a process' mailbox.
+ Mailboxes are scanned sequentially.
+ If a message fails to be pattern matched, it's saved in a queue for later
  processing and the process waits for the next message. It is possible to
  update a process with a new version of the code that retrieves those messages.

  The erlang shell (~erl~) is itself a process, you can test its message-passing
  functionalities by using the ~self~ keyword:

  #+BEGIN_SRC shell
    1> self() ! hello.
    hello
    2> receive X -> X end.
    hello
  #+END_SRC

  + Messages can be matched and selectivelly retrieved.
  + We can force an order (emulating a priority queue) by using multiple receives:

    #+NAME: erlang-seletive
    #+BEGIN_SRC dot :file ../static/img/notes/erlang_selective.png :cmdline -Kdot -Tpng :exports results
      digraph Selective {
          node [shape=circle];
          rankdir="LR";
          sep = 1;

          pid1 [label="Pid 1", xlabel="Pid 3 ! { foo, ... }", fontsize="10pt", style=filled, fillcolor=grey];
          pid2 [label="Pid 2", xlabel="Pid 3 ! { bar, ... }", fontsize="10pt", style=filled, fillcolor=grey];
          pid3 [label="Pid 3", fontsize="10pt", style=filled, fillcolor=white];

          pid1 -> pid3 [label="{foo, ...}", fontsize="10pt", minlen=1, style=dashed];
          pid2 -> pid3 [label="{bar, ...}", fontsize="10pt", minlen=1, style=dashed];
      }
    #+END_SRC

    #+RESULTS: erlang-seletive
    [[file:../static/img/notes/erlang_selective.png]]

    #+BEGIN_SRC erlang
      receive
        {foo, _} ->
        (...)
      end,
      (...)
      receive
        {bar, _} ->
        (...)
      end,
    #+END_SRC

    this way the message ~{foo, ...}~ is received before the message ~{bar, ...}~.

** Registered Processes
| BIF                 | Description                                                                        |
|---------------------+------------------------------------------------------------------------------------|
| ~register(Name, Pid)~ | Associates the name ~Name~, an atom, with the process ~Pid~.                           |
| ~registered/0~        | Returns a list of names that have been registered using ~register/2~.                |
| ~whereis(Name)~       | Returns the pid registered under ~Name~, or ~undefined~ if the name is not registered. |
| ~registered()~        | Return a list of all registered processes in the system.                           |

+ Sending messages to a non-existing registered process causes the calling
  process to terminate with a ~badarg~ error.

** Timeouts

+ If the message ~Msg~ is received within the ~TimeOut~, ~expr01~ will be
  executed. Otherwise, ~expr02~ will be executed.
+ ~TimeOut~ is an integer denoting the time in miliseconds or the Atom ~infinity~.

#+NAME: erlang-timeout
#+BEGIN_SRC dot :file ../static/img/notes/erlang_timeout.png :cmdline -Kdot -Tpng :exports results
  digraph Timeout {
      node [shape=circle];
      rankdir="LR";
      sep = 1;

      timeout [label="ðŸ•’", fontsize="10pt", style=filled, fillcolor=white];
      pid1 [label="Pid 1", fontsize="10pt", style=filled, fillcolor=grey];
      pid2 [label="Pid 2", fontsize="10pt", style=filled, fillcolor=grey];

      timeout -> pid2 [label="Timeout", fontsize="10pt", minlen=1, style=dashed];
      pid1 -> pid2 [label="Msg", fontsize="10pt", minlen=1, style=dashed];
  }
#+END_SRC

#+RESULTS: erlang-timeout
[[file:../static/img/notes/erlang_timeout.png]]

#+BEGIN_SRC erlang
  receive 
    Msg ->
      <expr01>
    after TimeOut ->
      <expr02>
  end
#+END_SRC

** Skeleton of an Erlang Process

#+NAME: erlang-process-skeleton
#+BEGIN_SRC dot :file ../static/img/notes/erlang_process_skeleton.png :cmdline -Kdot -Tpng :exports results
  digraph Process {
    node [fontsize="10pt", style=filled];
    
    start [label="Start", fillcolor=red, shape=circle];
    stop [label="Stop", fillcolor=red, shape=circle];
    init [label="Initialize", xlabel="Mod:Func(Args)", fillcolor=yellow, shape=rectangle];
    loop [label="Receive/Eval Loop", fillcolor=green, shape=rectangle]
    terminate [label="Terminate", fillcolor=yellow, shape=rectangle];

    start -> init [label="  Spawn(Mod, Func, Args)", fontsize="10pt", minlen=1];
    init -> loop
    loop -> loop
    stop -> loop
    loop -> terminate
  }
#+END_SRC

#+RESULTS: erlang-process-skeleton
[[file:../static/img/notes/erlang_process_skeleton.png]]


#+print_bibliography: 
