:PROPERTIES:
:ID:       22ae9c25-3123-4ed8-b765-369ac89d2942
:END:
#+title: Error Handling in Erlang
#+HUGO_CATEGORIES: "Functional Programming"
#+HUGO_TAGS: "Erlang"

#+BEGIN_QUOTE
In [[id:de7d0e94-618f-4982-b3e5-8806d88cad5d][Erlang]] we do exactly the opposite. We build our applications in two parts: a
part that solves the problem and a part that corrects errors if they have
occurred.

The part that solves the problem is written with as little defensive code as
possible; we assume that all arguments to functions are correct and the programs
will execute without errors.

The part that corrects errors is often generic, so the same error-correcting
code can be used for many different applications. [cite:@armstrong2013 p.201]
#+END_QUOTE

* Error Handling Semantics

** Processes
There are two types of processes: *normal processes* and *system processes*. ~spawn~
(see [[id:63607e63-4428-4578-bf2a-12a49649b49c][Concurrent Erlang]]) creates a normal process. A normal process can become a
system process by evaluating the BIF ~process_flag(trap_exit, true)~.

** Link

Linking processes can be thought as an extension of the error handling presented
when dealing with [[id:f0da3356-3797-4ddc-8306-cd333f159754][Sequential Erlang]]. We can, if necessary, catch exceptions
early in the sequential code, that still won't make our application fault
tolerant.

#+begin_quote
For one process to observe another, we must create a ~link~ or ~monitor~ between the
processes. If the linked or monitored processes dies, the observing process is
informed.

Observing processes work transparently across machine boundaries, so a
process running on one machine can monitor the behavior of a process run-
ning on a different machine. This is the basis for programming fault-tolerant
systems. [cite:@armstrong2013 p.200]
#+end_quote

To create links, we call the primitive ~link(Pid)~, which creates a link between the
calling process and ~Pid~. So, if ~Pid1~ calls ~link(Pid2)~, a link is created between ~Pid1~ and
~Pid2~.

#+BEGIN_SRC erlang
  Pid1 = link(Pid2)
#+END_SRC

+ ~link/1~ creates a bi-directional link between the process calling the BIF (~Pid1~) and
  the process linked (~Pid2~).
+ ~spawn_link/3~ will yield the same result as ~spawn/3~ followed by ~link/1~, only that
  will do so atomically.
+ ~unlink/1~ removes the link to ~Pid~.

#+NAME: erlang-process-link
#+BEGIN_SRC dot :file ../static/img/notes/erlang_process_link.png :cmdline -Kdot -Tpng :exports results
  digraph Link {
      node [shape=circle];
      rankdir="LR";
      sep = 1;

      pid1 [label="Pid 1", fontsize="10pt", style=filled, fillcolor=grey];
      pid2 [label="Pid 2", fontsize="10pt", style=filled, fillcolor=grey];

      pid1 -> pid2 [label="Pid2 = link(Pid1)", dir=both, fontsize="10pt", minlen=1, style=dashed];
  }
#+END_SRC

#+RESULTS: erlang-process-link
[[file:../static/img/notes/erlang_process_link.png]]

*** Link Set

The link set of a process ~P~ is the set of processes that are linked to ~P~.

#+NAME: erlang-link-set
#+BEGIN_SRC dot :file ../static/img/notes/erlang_link_set.png :cmdline -Kfdp -Tpng :exports results
  digraph LinkSet {
    node [fontsize="10pt", shape=circle, style=filled, fillcolor=grey];
    
    pid1 [label="Pid 1", pos="0,0!"];
    pid2 [label="Pid 2", pos="0,2!"];
    pid3 [label="Pid 3", pos="0,4!"];
    pid4 [label="Pid 4", pos="2,0!"];
    pid5 [label="Pid 5", pos="2,2!"];
    pid6 [label="Pid 6", pos="2,4!"];
    pid7 [label="Pid 7", pos="4,0!"];
    pid8 [label="Pid 8", pos="4,2!"];
    pid9 [label="Pid 9", pos="4,4!"];
    
    pid1 -> pid4 [dir=both, fontsize="10pt", minlen=1, style=dashed];
    pid3 -> pid5 [dir=both, fontsize="10pt", minlen=1, style=dashed];
    pid4 -> pid5 [dir=both, fontsize="10pt", minlen=1, style=dashed];
    pid5 -> pid9 [dir=both, fontsize="10pt", minlen=1, style=dashed];
    pid5 -> pid7 [dir=both, fontsize="10pt", minlen=1, style=dashed];
  }
#+END_SRC

#+RESULTS: erlang-link-set
[[file:../static/img/notes/erlang_link_set.png]]

*** Groups of Processes That All Die Together

In the previous example, if a single process from the Link Set fails, all the
processes from the Set also fail in cascate. Ultimately, the error signals
propagate to all the linked processes, and the entire group of linked processes
dies.

#+NAME: erlang-link-set-cascade
#+BEGIN_SRC dot :file ../static/img/notes/erlang_link_set_cascade.png :cmdline -Kfdp -Tpng :exports results
  digraph LinkSet {
    node [fontsize="10pt", shape=circle, style=filled, fillcolor=grey];
    
    pid1 [label="ðŸ’¥", fillcolor="red", pos="0,0!"];
    pid2 [label="Pid 2", pos="0,2!"];
    pid3 [label="ðŸ’¥", fillcolor="red", pos="0,4!"];
    pid4 [label="ðŸ’¥", fillcolor="red", pos="2,0!"];
    pid5 [label="ðŸ’¥", fillcolor="red", pos="2,2!"];
    pid6 [label="Pid 6", pos="2,4!"];
    pid7 [label="ðŸ’¥", fillcolor="red", pos="4,0!"];
    pid8 [label="Pid 8", pos="4,2!"];
    pid9 [label="ðŸ’¥", fillcolor="red", pos="4,4!"];
    
    pid1 -> pid4 [dir=both, fontsize="10pt", minlen=1, style=dashed];
    pid3 -> pid5 [dir=both, fontsize="10pt", minlen=1, style=dashed];
    pid4 -> pid5 [dir=both, fontsize="10pt", minlen=1, style=dashed];
    pid5 -> pid9 [dir=both, fontsize="10pt", minlen=1, style=dashed];
    pid5 -> pid7 [dir=both, fontsize="10pt", minlen=1, style=dashed];
  }
#+END_SRC

#+RESULTS: erlang-link-set-cascade
[[file:../static/img/notes/erlang_link_set_cascade.png]]

#+begin_quote
When an Erlang process fails, it sends an explanation to other processes that
are linked to it in the form of a tuple. The tuple contains the atom ~EXIT~, the
~Pid~ of the failed process, and the error as a complex tuple. [cite:@laurent2017 p.100]
#+end_quote

** Exit Signals
+ A process can termination can be *normal* or *abnormal*.
  * *Normal*: When there is no more code to execute.
  * *Abnormal*: When runtime errors occur.
+ When a process terminates, it sends a signal to all process its linked to. The
  exit signal will contain the following information:

 | Field               | Description                                                                             |
 |---------------------+-----------------------------------------------------------------------------------------|
 | *Sender Identifier*   | The process or port identifier of the process or port that terminated.                  |
 | *Receiver Identifier* | The process or port identifier of the process or port which the exit signal is sent to. |
 | The ~link~ flag       | This flag will be set indicating that the exit signal was sent due to a link.           |
 | ~exit~ reason       |                                                                                         |

#+NAME: erlang-error-exit-signals
#+BEGIN_SRC dot :file ../static/img/notes/erlang_error_exit_signals.png :cmdline -Kdot -Tpng :exports results
  digraph Link {
      node [shape=circle];
      rankdir="LR";
      sep = 1;

      pid1 [label="ðŸ’¥", fontsize="10pt", style=filled, fillcolor=red];
      pid2 [label="Pid 2", fontsize="10pt", style=filled, fillcolor=grey];

      pid1 -> pid2 [label="{'Exit', Pid1, Reason}", dir=both, fontsize="10pt", minlen=1, style=dashed];
  }
#+END_SRC

#+RESULTS: erlang-error-exit-signals
[[file:../static/img/notes/erlang_error_exit_signals.png]]

** Error Trapping

#+begin_quote
If your process is set to trap exits, through a call to ~process_flag(trap_exit,
true)~, these error reports arrive as messages, rather than just killing your
process. [cite:@laurent2017 p.100]
#+end_quote

*** Propagation Semantics
  
+ Processes can trap ~exit~ signals by calling the BIF ~process_flag(trap_exit, true)~.
+ Once trapped, the errors are saved in the mailbox.

#+NAME: erlang-error-trapping
#+BEGIN_SRC dot :file ../static/img/notes/erlang_error_trapping.png :cmdline -Kdot -Tpng :exports results
  digraph Trapping {
      node [shape=circle];
      rankdir="LR";
      sep = 1;

      pid1 [label="ðŸ’¥", fontsize="10pt", style=filled, fillcolor=red];
      pid2 [label="Pid 2", fontsize="10pt", style=filled, fillcolor=grey; shape=doublecircle];
      pid3 [label="Pid 3", fontsize="10pt", style=filled, fillcolor=grey];


      pid1 -> pid2 [label="{'Exit', Pid1, Reason}", dir=both, fontsize="10pt", minlen=1, style=dashed];
      pid2 -> pid3 [dir=both, fontsize="10pt", minlen=2, style=dashed];
  }
#+END_SRC

#+RESULTS: erlang-error-trapping
[[file:../static/img/notes/erlang_error_trapping.png]]

~Pid2~ functions as a firewall, stopping errors from propagating to other processes in the system.

** Monitors

Monitors are similar to links but with several significant differences.

+ Monitors are unidirectional.

A process ~Pid1~ can create a monitor for ~Pid2~ by calling the BIF
~erlang:monitor(process, Pid2)~. The function returns a reference ~Ref~.

#+NAME: erlang-monitor
#+BEGIN_SRC dot :file ../static/img/notes/erlang_monitor.png :cmdline -Kdot -Tpng :exports results
  digraph Monitor {
      node [shape=circle];
      rankdir="LR";
      sep = 1;

      pid1 [label="Pid 1", fontsize="10pt", style=filled, fillcolor=grey];
      pid2 [label="Pid 2", fontsize="10pt", style=filled, fillcolor=grey, shape=square];

      pid1 -> pid2 [fontsize="10pt", minlen=2, style=dashed];
  }
#+END_SRC

#+RESULTS: erlang-monitor
[[file:../static/img/notes/erlang_monitor.png]]

+ When a monitored process dies, a "down" message (not an ~exit~ signal) is sent
  to the monitoring process.

#+NAME: erlang-monitor-error
#+BEGIN_SRC dot :file ../static/img/notes/erlang_monitor_error.png :cmdline -Kdot -Tpng :exports results
  digraph Monitor {
      node [shape=circle];
      rankdir="LR";
      sep = 1;

      pid1 [label="ðŸ’¥", fontsize="10pt", style=filled, fillcolor=red];
      pid2 [label="Pid 2", fontsize="10pt", style=filled, fillcolor=grey, shape=square];

      pid1 -> pid2 [label="{'DOWN', Ref, process, Pid1, Reason}", fontsize="10pt", minlen=1, style=dashed];
  }
#+END_SRC

#+RESULTS: erlang-monitor-error
[[file:../static/img/notes/erlang_monitor_error.png]]

#+print_bibliography:
