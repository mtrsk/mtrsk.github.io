:PROPERTIES:
:ID:       bcd04f60-0a4c-4213-90f7-139c0ddf5bef
:EXPORT_HUGO_CATEGORIES: "FP"
:EXPORT_HUGO_TAGS: "Erlang"
:END:
#+title: Erlang Shell

Some features of the [[id:de7d0e94-618f-4982-b3e5-8806d88cad5d][Erlang]] shell.

* Examples
** Compiling and Running "Hello World" in the Shell
#+BEGIN_SRC erlang
  -module(hello).
  -export([start/0]).
  
  start() ->
      io:format("Hello world~n").
#+END_SRC

Running the ~hello.erl~ program in the erlang shell.

#+BEGIN_SRC shell
  $ erl                          
  Erlang/OTP 26 [erts-14.2.5] [source] [64-bit] [smp:24:24] [ds:24:24:10] [async-threads:1] [jit:ns]

  Eshell V14.2.5 (press Ctrl+G to abort, type help(). for help)
  1> c(hello).
  {ok,hello}
  2> hello:start().
  Hello world
  ok
#+END_SRC

*** Compiling Outside the Erlang Shell

#+BEGIN_SRC shell
  $ erlc hello.erl
  $ erl -noshell -s hello start -s init stop
#+END_SRC

#+BEGIN_QUOTE
~erlc~ evokes the Erlang compiler from the command line. The compiler compiles the code in ~hello.erl~ and produces an object code file called ~hello.beam~.

The ~erl -noshell~ command loads the module ~hello~ and evaluates the function
~hello:start()~. After this, it evaluates the expression ~init:stop()~, which
terminates the Erlang session.
#+END_QUOTE

* Commands
** Seeing Your Bound Variables

~b()~ shows all bound variables in the current erlang shell.

#+BEGIN_SRC shell
    > b().
    N = 1
    Number = 5
#+END_SRC

** Clearing Bound Variables in the Shell

#+BEGIN_SRC shell
  > f(N).
  > f().
#+END_SRC

#+print_bibliography:
