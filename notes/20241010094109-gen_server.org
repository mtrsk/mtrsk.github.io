:PROPERTIES:
:ID:       1cd8fd81-a7c4-44ea-8b7a-d803e9b491af
:END:
#+title: gen_server
#+HUGO_CATEGORIES: "Functional Programming"
#+HUGO_TAGS: "Erlang" "Elixir" "OTP"

#+begin_quote
Much of the work you think of as the core of a program - calculating results,
storing information, and preparing replies - will fit neatly into the ~gen_server~
behavior. It provides a core set of methods that let you set up a process,
respond to requests, end the process gracefully, and even pass state to a new
process if this one needs to be upgraded in place. [cite:@laurent2017 p.148]
#+end_quote

~gen_server~ is a generic server process that implements a standard set of
interface functions and functionality for tracing and error reporting, it also
fits an [[id:6ed3a191-0128-453e-b0b6-37c48593a6f0][OTP]] supervision tree.

The ~gen_server~ behaviour interface contains six functions:
+ ~init/1~
+ ~handle_call/3~: Sends a synchronous message to a ~gen_server~ process and waits for a reply.
+ ~handle_cast/2~: Sends an asynchronous message to a ~gen_server~ process.
+ ~handle_info/2~: Handles messages sent to a ~gen_server~ container that were not sent using one of the call or cast functions.
+ ~terminate/2~
+ ~code_change/3~

#+print_bibliography: 
