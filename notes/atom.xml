<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Benevides&#39; Blog</title>
  <link href="https://mtrsk.github.io/notes/"/>
  
    <link href="https://mtrsk.github.io/notes/atom.xml" rel="self" type="application/atom+xml" />
  
  <updated>2024-10-09T12:37:18Z</updated>
  <author>
    
    
  </author>
  <generator>Hugo</generator>
  <id>https://mtrsk.github.io/notes/</id>
  
  <entry>
    <title>Dializer</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/dializer/"/>
    <id>https://mtrsk.github.io/notes/2024/dializer/</id>
    <published>2024-10-09T00:00:00Z</published>
    <updated>2024-10-09T00:00:00Z</updated>
    <summary>:ID: 54473599-719d-460b-92ba-3796dd951872
Dialyzer is a static analysis tool that identifies software discrepancies, such as definite type errors, code that is unreachable because of programming errors, and unnecessary tests in [BROKEN LINK: de7d0e94-618f-4982-b3e5-8806d88cad5d] and [BROKEN LINK: 8d568d81-9c22-4d94-81b2-27a2d730ba98] modules or an entire codebases.</summary>
    <content type="html">&lt;p&gt;:ID:       54473599-719d-460b-92ba-3796dd951872&lt;/p&gt;
&lt;p&gt;Dialyzer is a static analysis tool that identifies software discrepancies, such
as definite type errors, code that is unreachable because of programming errors,
and unnecessary tests in [BROKEN LINK: de7d0e94-618f-4982-b3e5-8806d88cad5d] and [BROKEN LINK: 8d568d81-9c22-4d94-81b2-27a2d730ba98] modules or an entire codebases.&lt;/p&gt;
</content>
    
    <category term="Erlang"/>
    
    <category term="Elixir"/>
    
    
    <category term="Functional Programming"/>
    
  </entry>
  
  <entry>
    <title>Haskell</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/haskell/"/>
    <id>https://mtrsk.github.io/notes/2024/haskell/</id>
    <published>2024-10-08T00:00:00Z</published>
    <updated>2024-10-08T00:00:00Z</updated>
    <summary>:ID: a74d6aac-dbe9-48a6-83ca-648cd6ea933e</summary>
    <content type="html">&lt;p&gt;:ID:       a74d6aac-dbe9-48a6-83ca-648cd6ea933e&lt;/p&gt;
</content>
    
    <category term="Haskell"/>
    
    
    <category term="Functional Programming"/>
    
  </entry>
  
  <entry>
    <title>Nixos</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/nixos/"/>
    <id>https://mtrsk.github.io/notes/2024/nixos/</id>
    <published>2024-10-07T00:00:00Z</published>
    <updated>2024-10-07T00:00:00Z</updated>
    <summary>:ID: c350b99c-021d-4f5a-a948-4929056e1267
NixOS is a [BROKEN LINK: 8a427ee7-2ef1-489b-af82-91de7be8a3ba] distribution based on the purely functional package management system [BROKEN LINK: 72d705ae-9f5c-402b-88e5-21744277319a].</summary>
    <content type="html">&lt;p&gt;:ID:       c350b99c-021d-4f5a-a948-4929056e1267&lt;/p&gt;
&lt;p&gt;NixOS is a [BROKEN LINK: 8a427ee7-2ef1-489b-af82-91de7be8a3ba] distribution based on the purely functional package management system [BROKEN LINK: 72d705ae-9f5c-402b-88e5-21744277319a].&lt;/p&gt;
</content>
    
    <category term="Linux"/>
    
    <category term="Nix"/>
    
    <category term="NixOS"/>
    
    
    <category term="Operating Systems"/>
    
  </entry>
  
  <entry>
    <title>Elixir</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/elixir/"/>
    <id>https://mtrsk.github.io/notes/2024/elixir/</id>
    <published>2024-10-06T00:00:00Z</published>
    <updated>2024-10-06T00:00:00Z</updated>
    <summary>:ID: 8d568d81-9c22-4d94-81b2-27a2d730ba98 :EXPORT_HUGO_CATEGORIES: &amp;ldquo;FP&amp;rdquo; :EXPORT_HUGO_TAGS: &amp;ldquo;Elixir&amp;rdquo;
Elixir describes itself as a functional, meta-programming-aware language built on top of the Erlang virtual machine.
Basics Protocols </summary>
    <content type="html">&lt;p&gt;:ID:       8d568d81-9c22-4d94-81b2-27a2d730ba98
:EXPORT_HUGO_CATEGORIES: &amp;ldquo;FP&amp;rdquo;
:EXPORT_HUGO_TAGS: &amp;ldquo;Elixir&amp;rdquo;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Elixir describes itself as a functional, meta-programming-aware language built
on top of the &lt;a href=&#34;/notes/2024/erlang/&#34;&gt;Erlang&lt;/a&gt; virtual machine.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;
&lt;h3 id=&#34;protocols&#34;&gt;Protocols&lt;/h3&gt;
</content>
    
    
    <category term="notes"/>
    
  </entry>
  
  <entry>
    <title>Erlang Shell</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/erlang-shell/"/>
    <id>https://mtrsk.github.io/notes/2024/erlang-shell/</id>
    <published>2024-10-04T00:00:00Z</published>
    <updated>2024-10-04T00:00:00Z</updated>
    <summary>:ID: bcd04f60-0a4c-4213-90f7-139c0ddf5bef
Some features of the Erlang shell.
Examples Compiling and Running &amp;ldquo;Hello World&amp;rdquo; in the Shell -module(hello). -export([start/0]). start() -&amp;gt; io:format(&amp;#34;Hello world~n&amp;#34;). Running the hello.erl program in the erlang shell.
$ erl Erlang/OTP 26 [erts-14.2.5] [source] [64-bit] [smp:24:24] [ds:24:24:10] [async-threads:1] [jit:ns] Eshell V14.2.5 (press Ctrl+G to abort, type help(). for help) 1&amp;gt; c(hello). {ok,hello} 2&amp;gt; hello:start(). Hello world ok Compiling Outside the Erlang Shell $ erlc hello.erl $ erl -noshell -s hello start -s init stop erlc evokes the Erlang compiler from the command line.</summary>
    <content type="html">&lt;p&gt;:ID:       bcd04f60-0a4c-4213-90f7-139c0ddf5bef&lt;/p&gt;
&lt;p&gt;Some features of the &lt;a href=&#34;/notes/2024/erlang/&#34;&gt;Erlang&lt;/a&gt; shell.&lt;/p&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;h3 id=&#34;compiling-and-running-hello-world-in-the-shell&#34;&gt;Compiling and Running &amp;ldquo;Hello World&amp;rdquo; in the Shell&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-erlang&#34; data-lang=&#34;erlang&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;export&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nn&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello world&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;~n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running the &lt;code&gt;hello.erl&lt;/code&gt; program in the erlang shell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  $ erl
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Erlang/OTP &lt;span class=&#34;m&#34;&gt;26&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;erts-14.2.5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;source&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;64-bit&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;smp:24:24&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ds:24:24:10&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;async-threads:1&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;jit:ns&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Eshell V14.2.5 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;press Ctrl+G to abort, &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt; help&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;. &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;help&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  1&amp;gt; c&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;hello&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;ok,hello&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  2&amp;gt; hello:start&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Hello world
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ok
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;compiling-outside-the-erlang-shell&#34;&gt;Compiling Outside the Erlang Shell&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  $ erlc hello.erl
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  $ erl -noshell -s hello start -s init stop
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;erlc&lt;/code&gt; evokes the Erlang compiler from the command line. The compiler compiles the code in &lt;code&gt;hello.erl&lt;/code&gt; and produces an object code file called &lt;code&gt;hello.beam&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;erl -noshell&lt;/code&gt; command loads the module &lt;code&gt;hello&lt;/code&gt; and evaluates the function
&lt;code&gt;hello:start()&lt;/code&gt;. After this, it evaluates the expression &lt;code&gt;init:stop()&lt;/code&gt;, which
terminates the Erlang session. (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Armstrong 2013, 14&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;commands&#34;&gt;Commands&lt;/h2&gt;
&lt;h3 id=&#34;seeing-your-bound-variables&#34;&gt;Seeing Your Bound Variables&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;b()&lt;/code&gt; shows all bound variables in the current erlang shell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;gt; b&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;N&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;Number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;clearing-bound-variables-in-the-shell&#34;&gt;Clearing Bound Variables in the Shell&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;gt; f&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;N&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;gt; f&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Armstrong, Joe. 2013. “Programming Erlang: Software for a Concurrent World.”&lt;/div&gt;
&lt;/div&gt;
</content>
    
    <category term="Erlang"/>
    
    
    <category term="Functional Programming"/>
    
  </entry>
  
  <entry>
    <title>Error Handling In Erlang</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/error-handling-in-erlang/"/>
    <id>https://mtrsk.github.io/notes/2024/error-handling-in-erlang/</id>
    <published>2024-10-01T00:00:00Z</published>
    <updated>2024-10-01T00:00:00Z</updated>
    <summary>:ID: 22ae9c25-3123-4ed8-b765-369ac89d2942
In Erlang we have a large number of processes at our disposal, so the failure of any individual process is not so important. We usually write only a small amount of defensive code and instead concentrate on writing corrective code. We take measures to detect the errors and then correct them after they have occurred. (Armstrong 2013)
Definitions Link A bi-directional propagation path for exit signals. Exit Signal Transmit process termination information.</summary>
    <content type="html">&lt;p&gt;:ID:       22ae9c25-3123-4ed8-b765-369ac89d2942&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In &lt;a href=&#34;/notes/2024/erlang/&#34;&gt;Erlang&lt;/a&gt; we have a large number of processes at our disposal, so the failure
of any individual process is not so important. We usually write only a small
amount of defensive code and instead concentrate on writing corrective code.
We take measures to detect the errors and then correct them after they have
occurred. (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Armstrong 2013&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;definitions&#34;&gt;Definitions&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;Link&lt;/dt&gt;
&lt;dd&gt;A bi-directional propagation path for exit signals.&lt;/dd&gt;
&lt;dt&gt;Exit Signal&lt;/dt&gt;
&lt;dd&gt;Transmit process termination information.&lt;/dd&gt;
&lt;dt&gt;Error trapping&lt;/dt&gt;
&lt;dd&gt;The ability of an  to process exit signals as if they
were messages.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id=&#34;link&#34;&gt;Link&lt;/h3&gt;
&lt;p&gt;To create links, we call the primitive link(Pid), which creates a link between the
calling process and Pid. So, if P1 calls link(P3), a link is created between P1 and
P3.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-erlang&#34; data-lang=&#34;erlang&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;PidA&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PibB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;link/1&lt;/code&gt; creates a bi-directional link between the process calling the BIF (&lt;code&gt;PidA&lt;/code&gt;) and
the process linked (&lt;code&gt;PidB&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spawn_link/3&lt;/code&gt; will yield the same result as &lt;code&gt;spawn/3&lt;/code&gt; followed by &lt;code&gt;link/1&lt;/code&gt;, only that
will do so atomically.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unlink/1&lt;/code&gt; removes the link to &lt;code&gt;Pid&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;exit-signals&#34;&gt;Exit Signals&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Exit Signals can be &lt;strong&gt;normal&lt;/strong&gt; or &lt;strong&gt;abnormal&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;When a process terminates, it sends a signal to all process its linked to. The
exit signal will contain the following information:
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Sender Identifier&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The process or port identifier of the process or port that terminated.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Receiver Identifier&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The process or port identifier of the process or port which the exit signal is sent to.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The &lt;code&gt;link&lt;/code&gt; flag&lt;/td&gt;
&lt;td&gt;This flag will be set indicating that the exit signal was sent due to a link.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;exit&lt;/code&gt; reason&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;error-trapping&#34;&gt;Error Trapping&lt;/h3&gt;
&lt;h4 id=&#34;propagation-semantics&#34;&gt;Propagation Semantics&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Processes can trap &lt;code&gt;exit&lt;/code&gt; signals by calling the BIF &lt;code&gt;process_flag(trap_exit, true)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Once trapped, the errors are saved in the mailbox.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Armstrong, Joe. 2013. “Programming Erlang: Software for a Concurrent World.”&lt;/div&gt;
&lt;/div&gt;
</content>
    
    <category term="Erlang"/>
    
    
    <category term="Functional Programming"/>
    
  </entry>
  
  <entry>
    <title>Postgres Server</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/postgres-server/"/>
    <id>https://mtrsk.github.io/notes/2024/postgres-server/</id>
    <published>2024-10-01T00:00:00Z</published>
    <updated>2024-10-01T00:00:00Z</updated>
    <summary>:ID: ae205cab-10ea-4cff-9051-fef9021638b6 :EXPORT_HUGO_CATEGORIES: &amp;ldquo;Databases&amp;rdquo; :EXPORT_HUGO_TAGS: &amp;ldquo;SQL&amp;rdquo; &amp;ldquo;Postgres&amp;rdquo;
Locating the database server files Postgres Database server files are initially stored in a location referred to as data directory:
SHOW data_directory; </summary>
    <content type="html">&lt;p&gt;:ID:       ae205cab-10ea-4cff-9051-fef9021638b6
:EXPORT_HUGO_CATEGORIES: &amp;ldquo;Databases&amp;rdquo;
:EXPORT_HUGO_TAGS: &amp;ldquo;SQL&amp;rdquo; &amp;ldquo;Postgres&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;locating-the-database-server-files&#34;&gt;Locating the database server files&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;/notes/2024/postgres/&#34;&gt;Postgres&lt;/a&gt; Database server files are initially stored in a location referred to as data directory:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-psql&#34; data-lang=&#34;psql&#34;&gt;SHOW data_directory;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    
    <category term="notes"/>
    
  </entry>
  
  <entry>
    <title>Scsi</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/scsi/"/>
    <id>https://mtrsk.github.io/notes/2024/scsi/</id>
    <published>2024-10-01T00:00:00Z</published>
    <updated>2024-10-01T00:00:00Z</updated>
    <summary>:ID: 388e1a43-f7f6-4c9e-af19-d7b6116a070e</summary>
    <content type="html">&lt;p&gt;:ID:       388e1a43-f7f6-4c9e-af19-d7b6116a070e&lt;/p&gt;
</content>
    
    <category term="Protocols"/>
    
    
    <category term="Networking"/>
    
  </entry>
  
  <entry>
    <title>Concurrent Erlang</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/concurrent-erlang/"/>
    <id>https://mtrsk.github.io/notes/2024/concurrent-erlang/</id>
    <published>2024-09-30T00:00:00Z</published>
    <updated>2024-09-30T00:00:00Z</updated>
    <summary>:ID: 63607e63-4428-4578-bf2a-12a49649b49c :ROAM_ALIAS: &amp;ldquo;Erlang Process&amp;rdquo;
Processes In Erlang, creation of a parallel process is achieved by evaluating the spawn primitive. This primitive creates a concurrent process and returns a process identifier (PID) that can used to interact with the newly created process:
Pid = spawn(ModName, FuncName, [Arg1, Arg2, ..., ArgN]). This BIF never fails A process can either terminate: Abormally when run-time errors occur Normally when there is no more code to execute Modeling Concurrency The syntax Pid !</summary>
    <content type="html">&lt;p&gt;:ID:       63607e63-4428-4578-bf2a-12a49649b49c
:ROAM_ALIAS: &amp;ldquo;Erlang Process&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;processes&#34;&gt;Processes&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&#34;/notes/2024/erlang/&#34;&gt;Erlang&lt;/a&gt;, creation of a parallel process is achieved by evaluating the &lt;code&gt;spawn&lt;/code&gt;
primitive. This primitive creates a concurrent process and returns a process
identifier (PID) that can used to interact with the newly created process:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-erlang&#34; data-lang=&#34;erlang&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;Pid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;spawn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ModName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;FuncName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;Arg1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;Arg2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ArgN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;This BIF never fails&lt;/li&gt;
&lt;li&gt;A process can either terminate:
&lt;ul&gt;
&lt;li&gt;Abormally when run-time errors occur&lt;/li&gt;
&lt;li&gt;Normally when there is no more code to execute&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;modeling-concurrency&#34;&gt;Modeling Concurrency&lt;/h3&gt;
&lt;p&gt;The syntax &lt;code&gt;Pid ! Msg&lt;/code&gt; means &amp;ldquo;send the message &lt;code&gt;Msg&lt;/code&gt; to the process &lt;code&gt;Pid&lt;/code&gt;&amp;rdquo;, where &lt;code&gt;Msg&lt;/code&gt;
is from any valid &lt;a href=&#34;/notes/2024/erlang/&#34;&gt;Erlang&lt;/a&gt; data type. For a &lt;code&gt;Pid&lt;/code&gt; to process a message we need to
pattern match:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-erlang&#34; data-lang=&#34;erlang&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;receive&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;From&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;Message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sending a message will never fail&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A message sent to non-existing processes are throw away&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Received messages are store in a process&amp;rsquo; mailbox&lt;/p&gt;
&lt;p&gt;The erlang shell (&lt;code&gt;erl&lt;/code&gt;) is itself a process, you can test its message-passing
functionalities by using the &lt;code&gt;self&lt;/code&gt; keyword:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    1&amp;gt; self&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; ! hello.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    hello
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    2&amp;gt; receive X -&amp;gt; X end.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    hello
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Messages can be matched and selectivelly retrieved&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-erlang&#34; data-lang=&#34;erlang&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Messages are received when a message matches a clause&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mailboxes are scanned sequentially&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;registered-processes&#34;&gt;Registered Processes&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;BIF&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;register(Name, Pid)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Associates the name &lt;code&gt;Name&lt;/code&gt;, an atom, with the process &lt;code&gt;Pid&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;registered/0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns a list of names that have been registered using &lt;code&gt;register/2&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;whereis(Name)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns the pid registered under &lt;code&gt;Name&lt;/code&gt;, or &lt;code&gt;undefined&lt;/code&gt; if the name is not registered.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Sending messages to a non-existing registered process causes the calling
process to terminate with a &lt;code&gt;badarg&lt;/code&gt; error.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;timeouts&#34;&gt;Timeouts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If the message &lt;code&gt;Msg&lt;/code&gt; is received within the &lt;code&gt;TimeOut&lt;/code&gt;, &lt;code&gt;expr01&lt;/code&gt; will be
executed. Otherwise, &lt;code&gt;expr02&lt;/code&gt; will be executed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TimeOut&lt;/code&gt; is an integer denoting the time in miliseconds or the Atom &lt;code&gt;infinity&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--listend--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-erlang&#34; data-lang=&#34;erlang&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;receive&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr01&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;after&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;TimeOut&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr02&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
&lt;/div&gt;
</content>
    
    <category term="Erlang"/>
    
    
    <category term="Functional Programming"/>
    
  </entry>
  
  <entry>
    <title>Otp</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/otp/"/>
    <id>https://mtrsk.github.io/notes/2024/otp/</id>
    <published>2024-09-28T00:00:00Z</published>
    <updated>2024-09-28T00:00:00Z</updated>
    <summary>:ID: 6ed3a191-0128-453e-b0b6-37c48593a6f0 :ROAM_ALIAS: &amp;ldquo;Open Telecom Platform&amp;rdquo;
Otp is a domain-independent set of frameworks, principles, and patterns that guide and support the structure, design, implementation, and deployment of Erlang systems. Using OTP in your projects will help you avoid accidental complexity: things that are difficult because you picked inadequate tools. (Cesarini and Vinoski 2016, 20)
References Cesarini, Francesco, and Steve Vinoski. 2016. Designing for Scalability with Erlang/Otp: Implement Robust, Fault-Tolerant Systems. O’Reilly Media, Inc.</summary>
    <content type="html">&lt;p&gt;:ID:       6ed3a191-0128-453e-b0b6-37c48593a6f0
:ROAM_ALIAS: &amp;ldquo;Open Telecom Platform&amp;rdquo;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;/notes/2024/otp/&#34;&gt;Otp&lt;/a&gt; is a domain-independent set of frameworks, principles, and patterns that
guide and support the structure, design, implementation, and deployment of
&lt;a href=&#34;/notes/2024/erlang/&#34;&gt;Erlang&lt;/a&gt; systems. Using OTP in your projects will help you avoid accidental
complexity: things that are difficult because you picked inadequate
tools. (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Cesarini and Vinoski 2016, 20&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Cesarini, Francesco, and Steve Vinoski. 2016. &lt;i&gt;Designing for Scalability with Erlang/Otp: Implement Robust, Fault-Tolerant Systems&lt;/i&gt;. O’Reilly Media, Inc.&lt;/div&gt;
&lt;/div&gt;
</content>
    
    <category term="Erlang"/>
    
    <category term="Elixir"/>
    
    <category term="OTP"/>
    
    
    <category term="Functional Programming"/>
    
  </entry>
  
  <entry>
    <title>Split Brain</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/split-brain/"/>
    <id>https://mtrsk.github.io/notes/2024/split-brain/</id>
    <published>2024-09-28T00:00:00Z</published>
    <updated>2024-09-28T00:00:00Z</updated>
    <summary>:ID: 582a4090-eb66-4dfd-8166-9acd3c97dcc9
Split brain means that the Clusters is split in two (or more) parts, but both parts think they are the only remaining part of the cluster. This can lead to very bad situations when both parts of the cluster try to host the resources that are offered by the cluster. If the resource is a file system, and multiple nodes try to write to the file system simultaneously and without coordination, it may lead to corruption of the file system and the loss of data.</summary>
    <content type="html">&lt;p&gt;:ID:       582a4090-eb66-4dfd-8166-9acd3c97dcc9&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Split brain means that the &lt;a href=&#34;/notes/2024/clusters/&#34;&gt;Clusters&lt;/a&gt; is split in two (or more) parts, but both
parts think they are the only remaining part of the cluster. This can lead to
very bad situations when both parts of the cluster try to host the resources
that are offered by the cluster. If the resource is a file system, and multiple
nodes try to write to the file system simultaneously and without coordination,
it may lead to corruption of the file system and the loss of data. As it is the
purpose of a high availability cluster to avoid situations where data could be
lost, this must be prevented no matter what. (, &lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Van Vugt 2014, 6&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Van Vugt, Sander. 2014. &lt;i&gt;Pro Linux High Availability Clustering&lt;/i&gt;. Apress.&lt;/div&gt;
&lt;/div&gt;
</content>
    
    <category term="Clusters"/>
    
    
    <category term="Distributed Systems"/>
    
  </entry>
  
  <entry>
    <title>Sql</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/sql/"/>
    <id>https://mtrsk.github.io/notes/2024/sql/</id>
    <published>2024-09-28T00:00:00Z</published>
    <updated>2024-09-28T00:00:00Z</updated>
    <summary>:ID: 11f7d9cc-51a6-4897-955b-37a756105677 :EXPORT_HUGO_CATEGORIES: &amp;ldquo;Databases&amp;rdquo; :EXPORT_HUGO_TAGS: &amp;ldquo;SQL&amp;rdquo;
Logical Query Processing Order FROM JOIN Step Description 1 Cartesian product 2 Qualification step (i.e. the ON filter) 3 LEFT or RIGHT reservations If the specified JOIN type is a CROSS JOIN, then the query planner stops at Step 1 and return the cartesian product to the next clause. All other join types proceed to the qualification step.
INNER and OUTER JOINS are called &amp;ldquo;qualified JOINs&amp;rdquo;, the qualification predicated is specified using the ON keyword, which filters all rows from the previous cartesian step where the predicate is TRUE.</summary>
    <content type="html">&lt;p&gt;:ID:       11f7d9cc-51a6-4897-955b-37a756105677
:EXPORT_HUGO_CATEGORIES: &amp;ldquo;Databases&amp;rdquo;
:EXPORT_HUGO_TAGS: &amp;ldquo;SQL&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;logical-query-processing-order&#34;&gt;Logical Query Processing Order&lt;/h2&gt;
&lt;h3 id=&#34;from&#34;&gt;FROM&lt;/h3&gt;
&lt;h4 id=&#34;join&#34;&gt;JOIN&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Step&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Cartesian product&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Qualification step (i.e. the ON filter)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;LEFT&lt;/code&gt; or &lt;code&gt;RIGHT&lt;/code&gt; reservations&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If the specified &lt;code&gt;JOIN&lt;/code&gt; type is a &lt;code&gt;CROSS JOIN&lt;/code&gt;, then the query planner stops at Step
1 and return the cartesian product to the next clause. All other join types
proceed to the qualification step.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;INNER&lt;/code&gt; and &lt;code&gt;OUTER&lt;/code&gt; &lt;code&gt;JOINS&lt;/code&gt; are called &amp;ldquo;qualified JOINs&amp;rdquo;, the qualification
predicated is specified using the &lt;code&gt;ON&lt;/code&gt; keyword, which filters all rows from the
previous cartesian step where the predicate is &lt;code&gt;TRUE&lt;/code&gt;. If the request is an
&lt;code&gt;INNER JOIN&lt;/code&gt;, then the qualified rows are returned to the next clause, if it is an
&lt;code&gt;OUTER JOIN&lt;/code&gt;, the qualified rows go throught the next step.&lt;/p&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;Chiastic Order&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;where&#34;&gt;WHERE&lt;/h3&gt;
&lt;h3 id=&#34;group-by&#34;&gt;GROUP BY&lt;/h3&gt;
&lt;h3 id=&#34;having&#34;&gt;HAVING&lt;/h3&gt;
&lt;h3 id=&#34;select&#34;&gt;SELECT&lt;/h3&gt;
&lt;h3 id=&#34;order-by&#34;&gt;ORDER BY&lt;/h3&gt;
&lt;h3 id=&#34;offset-fetch&#34;&gt;OFFSET/FETCH&lt;/h3&gt;
</content>
    
    
    <category term="notes"/>
    
  </entry>
  
  <entry>
    <title>Clusters</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/clusters/"/>
    <id>https://mtrsk.github.io/notes/2024/clusters/</id>
    <published>2024-09-26T00:00:00Z</published>
    <updated>2024-09-26T00:00:00Z</updated>
    <summary>:ID: d8a1a1ff-47e6-44bc-a627-83ca8dc61ecb
Different Kinds of Clusters High Availability Clusters The goal of a high availability cluster is to make sure that critical resources reach the maximum possible availability. This goal is accomplished by installing cluster software on multiple servers. This software monitors the availability of the cluster nodes, and it monitors the availability of the services that are managed by the cluster. If a server goes down, or if the resource stops, the HA cluster will notice and make sure that the resource is restarted somewhere else in the cluster, so that it can be used again after a minimal interruption.</summary>
    <content type="html">&lt;p&gt;:ID:       d8a1a1ff-47e6-44bc-a627-83ca8dc61ecb&lt;/p&gt;
&lt;h2 id=&#34;different-kinds-of-clusters&#34;&gt;Different Kinds of Clusters&lt;/h2&gt;
&lt;h3 id=&#34;high-availability-clusters&#34;&gt;High Availability Clusters&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The goal of a high availability cluster is to make sure that critical resources
reach the maximum possible availability. This goal is accomplished by installing
cluster software on multiple servers. This software monitors the availability of
the cluster nodes, and it monitors the availability of the services that are
managed by the cluster. If a server goes down, or if the resource stops, the HA
cluster will notice and make sure that the resource is restarted somewhere else
in the cluster, so that it can be used again after a minimal interruption. (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Van Vugt 2014&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Van Vugt, Sander. 2014. &lt;i&gt;Pro Linux High Availability Clustering&lt;/i&gt;. Apress.&lt;/div&gt;
&lt;/div&gt;
</content>
    
    <category term="Clusters"/>
    
    
    <category term="Distributed Systems"/>
    
  </entry>
  
  <entry>
    <title>Stonith</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/stonith/"/>
    <id>https://mtrsk.github.io/notes/2024/stonith/</id>
    <published>2024-09-26T00:00:00Z</published>
    <updated>2024-09-26T00:00:00Z</updated>
    <summary>:ID: 789326a5-20aa-4492-acb6-1474c3c11a4a :ROAM_ALIASES: Fencing
In STONITH, specific hardware is used to terminate a node that is no longer responsive to the cluster. The idea behind STONITH is that before migrating resources to another node in the cluster, the cluster has to confirm that the node in question really is down. To do this, the cluster will send a shutdown action to the STONITH device, which will, in turn, terminate the nonresponsive node.</summary>
    <content type="html">&lt;p&gt;:ID:       789326a5-20aa-4492-acb6-1474c3c11a4a
:ROAM_ALIASES: Fencing&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In STONITH, specific hardware is used to terminate a node that is no longer
responsive to the cluster. The idea behind STONITH is that before migrating
resources to another node in the cluster, the cluster has to confirm that the
node in question really is down. To do this, the cluster will send a shutdown
action to the STONITH device, which will, in turn, terminate the nonresponsive
node. (Van Vugt 2014, chap. 1)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;mechanisms&#34;&gt;Mechanisms&lt;/h2&gt;
&lt;h3 id=&#34;power-fencing&#34;&gt;Power Fencing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cuts the node off from power.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fabric-fencing-disconnects-the-machine-from-storage-dot&#34;&gt;Fabric Fencing :: Disconnects the machine from storage.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;By closing ports in a Fibre Channel Switch.&lt;/li&gt;
&lt;li&gt;By using &lt;a href=&#34;/notes/2024/scsi/&#34;&gt;Scsi&lt;/a&gt; reservations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fencing-agents&#34;&gt;Fencing Agents&lt;/h2&gt;
</content>
    
    <category term="Clusters"/>
    
    
    <category term="Distributed Systems"/>
    
  </entry>
  
  <entry>
    <title>Quorum</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/quorum/"/>
    <id>https://mtrsk.github.io/notes/2024/quorum/</id>
    <published>2024-09-25T00:00:00Z</published>
    <updated>2024-09-25T00:00:00Z</updated>
    <summary>:ID: 42950824-228d-48d6-abec-4e18908dfca0
Quorum means &amp;ldquo;majority&amp;rdquo;, and the idea behind quorum is easy to understand: if the Clusters doesn’t have quorum, no actions will be taken in the cluster. This by itself would offer a good solution to avoid the Split Brain problem.
But to make sure that it can never happen, that multiple nodes activate the same resources in the cluster, another mechanism is used as well. This mechanism is known as Stonith.</summary>
    <content type="html">&lt;p&gt;:ID:       42950824-228d-48d6-abec-4e18908dfca0&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Quorum means &amp;ldquo;majority&amp;rdquo;, and the idea behind quorum is easy to understand: if
the &lt;a href=&#34;/notes/2024/clusters/&#34;&gt;Clusters&lt;/a&gt; doesn’t have quorum, no actions will be taken in the cluster. This
by itself would offer a good solution to avoid the &lt;a href=&#34;/notes/2024/split_brain/&#34;&gt;Split Brain&lt;/a&gt; problem.&lt;/p&gt;
&lt;p&gt;But to make sure that it can never happen, that multiple nodes activate the same
resources in the cluster, another mechanism is used as well. This mechanism is
known as &lt;a href=&#34;/notes/2024/stonith/&#34;&gt;Stonith&lt;/a&gt;. (, &lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Van Vugt 2014, 6&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is required to avoid corruption on vital &lt;a href=&#34;/notes/2024/clusters/&#34;&gt;Clusters&lt;/a&gt; resources, such as the
File System.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Van Vugt, Sander. 2014. &lt;i&gt;Pro Linux High Availability Clustering&lt;/i&gt;. Apress.&lt;/div&gt;
&lt;/div&gt;
</content>
    
    <category term="Clusters"/>
    
    
    <category term="Distributed Systems"/>
    
  </entry>
  
</feed>
