<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Benevides&#39; Blog</title>
  <link href="https://mtrsk.github.io/notes/"/>
  
    <link href="https://mtrsk.github.io/notes/atom.xml" rel="self" type="application/atom+xml" />
  
  <updated>2024-10-13T19:36:14Z</updated>
  <author>
    
    
  </author>
  <generator>Hugo</generator>
  <id>https://mtrsk.github.io/notes/</id>
  
  <entry>
    <title>Partial Order</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/partial-order/"/>
    <id>https://mtrsk.github.io/notes/2024/partial-order/</id>
    <published>2024-10-13T00:00:00Z</published>
    <updated>2024-10-13T00:00:00Z</updated>
    <summary>:ID: ce27d04b-aa7b-4fd5-98d3-30aa645f0d46
A Relation \(R\) is said to be a reflexive partial order if its reflexive, antisymmetric, and transitive. </summary>
    <content type="html">&lt;p&gt;:ID:       ce27d04b-aa7b-4fd5-98d3-30aa645f0d46&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a href=&#34;/notes/2024/relation/&#34;&gt;Relation&lt;/a&gt; \(R\) is said to be a &lt;strong&gt;reflexive partial order&lt;/strong&gt; if its &lt;strong&gt;reflexive&lt;/strong&gt;,
&lt;strong&gt;antisymmetric&lt;/strong&gt;, and &lt;strong&gt;transitive&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <category term="Set Theory"/>
    
    
    <category term="Math"/>
    
  </entry>
  
  <entry>
    <title>Relation</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/relation/"/>
    <id>https://mtrsk.github.io/notes/2024/relation/</id>
    <published>2024-10-13T00:00:00Z</published>
    <updated>2024-10-13T00:00:00Z</updated>
    <summary>:ID: efd79527-1cfb-48da-868e-6286cff21c34
A relation is any subset of a Cartesian product. For instance, a relation \(R\) over any subset of \(X \times X\) is called a &amp;ldquo;Relation on \(X\)&amp;rdquo;.
A Relation \(R\) is said to be reflexive if \(\forall x \in X: (x,x) \in R\). A Relation \(R\) is said to be symmetric if \(\forall x,y \in X: (x,y) \in R \implies (y,x) \in R\). A Relation \(R\) is antisymmetric if \(\forall x,y \in X: (x,y) \in R \land (y,x) \in R \implies x = y\).</summary>
    <content type="html">&lt;p&gt;:ID:       efd79527-1cfb-48da-868e-6286cff21c34&lt;/p&gt;
&lt;p&gt;A relation is any subset of a Cartesian product. For instance, a relation \(R\)
over any subset of \(X \times X\) is called a &amp;ldquo;Relation on \(X\)&amp;rdquo;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Relation \(R\) is said to be &lt;strong&gt;reflexive&lt;/strong&gt; if \(\forall x \in X: (x,x) \in R\).&lt;/li&gt;
&lt;li&gt;A Relation \(R\) is said to be &lt;strong&gt;symmetric&lt;/strong&gt; if \(\forall x,y \in X: (x,y) \in R \implies (y,x)
\in R\).&lt;/li&gt;
&lt;li&gt;A Relation \(R\) is &lt;strong&gt;antisymmetric&lt;/strong&gt; if \(\forall x,y \in X: (x,y) \in R \land (y,x) \in R \implies x
= y\).&lt;/li&gt;
&lt;li&gt;A Relation \(R\) is &lt;strong&gt;transitive&lt;/strong&gt; if \(\forall x,y,z \in X: (x,y) \in R \land (y,z) \in R \implies
(x,z) \in R\).&lt;/li&gt;
&lt;li&gt;A Relation \(R\) is an &lt;strong&gt;equivalence relation&lt;/strong&gt; if it is &lt;strong&gt;reflexive&lt;/strong&gt;, &lt;strong&gt;symmetric&lt;/strong&gt; and &lt;strong&gt;transitive&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <category term="Set Theory"/>
    
    
    <category term="Math"/>
    
  </entry>
  
  <entry>
    <title>Supervisor</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/supervisor/"/>
    <id>https://mtrsk.github.io/notes/2024/supervisor/</id>
    <published>2024-10-13T00:00:00Z</published>
    <updated>2024-10-13T00:00:00Z</updated>
    <summary>:ID: 2daf1307-afb4-49e4-98cb-66ac7eb27cf0</summary>
    <content type="html">&lt;p&gt;:ID:       2daf1307-afb4-49e4-98cb-66ac7eb27cf0&lt;/p&gt;
</content>
    
    <category term="OTP"/>
    
    
    <category term="Functional Programming"/>
    
  </entry>
  
  <entry>
    <title>Dependent Types</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/dependent-types/"/>
    <id>https://mtrsk.github.io/notes/2024/dependent-types/</id>
    <published>2024-10-11T00:00:00Z</published>
    <updated>2024-10-11T00:00:00Z</updated>
    <summary>:ID: 7580b45a-1dba-4690-bfbf-652fee25e1d9</summary>
    <content type="html">&lt;p&gt;:ID:       7580b45a-1dba-4690-bfbf-652fee25e1d9&lt;/p&gt;
</content>
    
    
    <category term="notes"/>
    
  </entry>
  
  <entry>
    <title>Functional Programming</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/functional-programming/"/>
    <id>https://mtrsk.github.io/notes/2024/functional-programming/</id>
    <published>2024-10-11T00:00:00Z</published>
    <updated>2024-10-11T00:00:00Z</updated>
    <summary>:ID: 171718cd-10fd-484b-8d77-0ffcffc29163
We often refer to the term functional programming, meaning the following programming techniques:
Composing functions for structuring programs and using recursion instead of loops. Purity, so that the result of a function is fully determined once its parameters have been fixed. Absence of side effects (doing literally nothing except evaluating the result). Immutability (the inability to change the value of a variable). (, Bragilevsky 2021)
References Bragilevsky, Vitaly. 2021.</summary>
    <content type="html">&lt;p&gt;:ID:       171718cd-10fd-484b-8d77-0ffcffc29163&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We often refer to the term functional programming, meaning the following programming techniques:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Composing functions for structuring programs and using recursion instead of loops.&lt;/li&gt;
&lt;li&gt;Purity, so that the result of a function is fully determined once its parameters have been fixed.&lt;/li&gt;
&lt;li&gt;Absence of side effects (doing literally nothing except evaluating the result).&lt;/li&gt;
&lt;li&gt;Immutability (the inability to change the value of a variable).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(, &lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Bragilevsky 2021&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Bragilevsky, Vitaly. 2021. &lt;i&gt;Haskell in Depth&lt;/i&gt;. Simon and Schuster.&lt;/div&gt;
&lt;/div&gt;
</content>
    
    
    <category term="Functional Programming"/>
    
  </entry>
  
  <entry>
    <title>Erlang Ets</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/erlang-ets/"/>
    <id>https://mtrsk.github.io/notes/2024/erlang-ets/</id>
    <published>2024-10-10T00:00:00Z</published>
    <updated>2024-10-10T00:00:00Z</updated>
    <summary>:ID: 37c6ea44-0c80-4c57-a36e-98d37e8a3413 :ROAM_ALIAS: &amp;ldquo;ETS&amp;rdquo;
Erlang Term Storage, commonly referred to as ETS, is a powerful storage engine built into Otp.</summary>
    <content type="html">&lt;p&gt;:ID:       37c6ea44-0c80-4c57-a36e-98d37e8a3413
:ROAM_ALIAS: &amp;ldquo;ETS&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Erlang Term Storage, commonly referred to as ETS, is a powerful storage engine
built into &lt;a href=&#34;/notes/2024/otp/&#34;&gt;Otp&lt;/a&gt;.&lt;/p&gt;
</content>
    
    <category term="Erlang"/>
    
    <category term="Elixir"/>
    
    <category term="OTP"/>
    
    
    <category term="Functional Programming"/>
    
  </entry>
  
  <entry>
    <title>Gen Server</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/gen-server/"/>
    <id>https://mtrsk.github.io/notes/2024/gen-server/</id>
    <published>2024-10-10T00:00:00Z</published>
    <updated>2024-10-10T00:00:00Z</updated>
    <summary>:ID: 1cd8fd81-a7c4-44ea-8b7a-d803e9b491af
Much of the work you think of as the core of a program - calculating results, storing information, and preparing replies - will fit neatly into the gen_server behavior. It provides a core set of methods that let you set up a process, respond to requests, end the process gracefully, and even pass state to a new process if this one needs to be upgraded in place. (Laurent 2017, 148)</summary>
    <content type="html">&lt;p&gt;:ID:       1cd8fd81-a7c4-44ea-8b7a-d803e9b491af&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Much of the work you think of as the core of a program - calculating results,
storing information, and preparing replies - will fit neatly into the &lt;code&gt;gen_server&lt;/code&gt;
behavior. It provides a core set of methods that let you set up a process,
respond to requests, end the process gracefully, and even pass state to a new
process if this one needs to be upgraded in place. (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Laurent 2017, 148&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;gen_server&lt;/code&gt; is a generic server process that implements a standard set of
interface functions and functionality for tracing and error reporting, it also
fits an &lt;a href=&#34;/notes/2024/otp/&#34;&gt;Otp&lt;/a&gt; supervision tree.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Laurent, Simon St. 2017. &lt;i&gt;Introducing Erlang: Getting Started in Functional Programming&lt;/i&gt;. O’Reilly Media, Inc.&lt;/div&gt;
&lt;/div&gt;
</content>
    
    <category term="Erlang"/>
    
    <category term="Elixir"/>
    
    <category term="OTP"/>
    
    
    <category term="Functional Programming"/>
    
  </entry>
  
  <entry>
    <title>Relational Algebra</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/relational-algebra/"/>
    <id>https://mtrsk.github.io/notes/2024/relational-algebra/</id>
    <published>2024-10-10T00:00:00Z</published>
    <updated>2024-10-10T00:00:00Z</updated>
    <summary>:ID: 11914357-b272-40fc-8bf6-a0ff98af0c99</summary>
    <content type="html">&lt;p&gt;:ID:       11914357-b272-40fc-8bf6-a0ff98af0c99&lt;/p&gt;
</content>
    
    <category term="Relational Theory"/>
    
    
    <category term="Databases"/>
    
  </entry>
  
  <entry>
    <title>Dializer</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/dializer/"/>
    <id>https://mtrsk.github.io/notes/2024/dializer/</id>
    <published>2024-10-09T00:00:00Z</published>
    <updated>2024-10-09T00:00:00Z</updated>
    <summary>:ID: 54473599-719d-460b-92ba-3796dd951872
Dialyzer is a static analysis tool that identifies software discrepancies, such as definite type errors, code that is unreachable because of programming errors, and unnecessary tests in Erlang and Elixir modules or an entire codebases.
Erlang Type Notation We can define a subset of Erlang types as follows:
Type :: any() | none() | pid() | port() | reference() | [] | Atom | binary() | float() | Fun | Integer | [Type] | Tuple | Union | UserDefined Union :: Type1 | Type2 | .</summary>
    <content type="html">&lt;p&gt;:ID:       54473599-719d-460b-92ba-3796dd951872&lt;/p&gt;
&lt;p&gt;Dialyzer is a static analysis tool that identifies software discrepancies, such
as definite type errors, code that is unreachable because of programming errors,
and unnecessary tests in &lt;a href=&#34;/notes/2024/erlang/&#34;&gt;Erlang&lt;/a&gt; and &lt;a href=&#34;/notes/2024/elixir/&#34;&gt;Elixir&lt;/a&gt; modules or an entire codebases.&lt;/p&gt;
&lt;h2 id=&#34;erlang-type-notation&#34;&gt;Erlang Type Notation&lt;/h2&gt;
&lt;p&gt;We can define a subset of Erlang types as follows:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;Type ::
      any()
    | none()
    | pid()
    | port()
    | reference()
    | []
    | Atom
    | binary()
    | float()
    | Fun
    | Integer
    | [Type]
    | Tuple
    | Union
    | UserDefined
Union :: Type1 | Type2 | ...
Atom :: atom() | Erlang_Atom
Integer :: integer() | Min .. Max
Fun :: fun() | fun((...) -&amp;gt; Type)
Tuple :: tuple() | {T1, T2, ... Tn}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;New types can be defined with the following syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-erlang&#34; data-lang=&#34;erlang&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;NewTypeName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;TVar1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;TVar2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;TVarN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;specifying-the-input-and-output-types-of-a-function&#34;&gt;Specifying the Input and Output Types of a Function&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-erlang&#34; data-lang=&#34;erlang&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;ni&#34;&gt;spec&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FileName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;Modes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ok&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;Handle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;Why&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;when&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;FileName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;Modes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;Mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;Mode&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;write&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;Handle&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file_handle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;Why&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;error_term&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;exporting-types&#34;&gt;Exporting Types&lt;/h3&gt;
&lt;p&gt;A module can export some types to declare that other modules are allowed to
refer to them as remote types. This declaration has the following form:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-erlang&#34; data-lang=&#34;erlang&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;export_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;T1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;A1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;Tk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;Ak&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;opaque-types&#34;&gt;Opaque Types&lt;/h3&gt;
&lt;p&gt;The main use case for opacity in Erlang is to hide the implementation of a data
type, enabling evolving the API while minimizing the risk of breaking consumers.&lt;/p&gt;
&lt;h2 id=&#34;running-dializer&#34;&gt;Running Dializer&lt;/h2&gt;
&lt;h3 id=&#34;things-that-confuse-dializer&#34;&gt;Things that confuse Dializer&lt;/h3&gt;
&lt;p&gt;The dialyzer can get easily confused. We can help prevent this by following a
few simple rules. (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Armstrong 2013, 151&lt;/a&gt;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Avoid using &lt;code&gt;-compile(export_all)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Provide detailed type specifications for all the arguments to the &lt;strong&gt;exported&lt;/strong&gt;
functions in the module.&lt;/li&gt;
&lt;li&gt;Provide default arguments to all elements in a record definition. If you don&amp;rsquo;t
provide a default, the atom &lt;code&gt;undefined&lt;/code&gt; is taken as the default.&lt;/li&gt;
&lt;li&gt;Using anonymous variables in arguments to a function often results in types
that are far less specific than you had intended; try to constrain variables
as much as possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Armstrong, Joe. 2013. “Programming Erlang: Software for a Concurrent World.”&lt;/div&gt;
&lt;/div&gt;
</content>
    
    <category term="Erlang"/>
    
    <category term="Elixir"/>
    
    
    <category term="Functional Programming"/>
    
  </entry>
  
  <entry>
    <title>Fallacies Of Distributed Computing</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/fallacies-of-distributed-computing/"/>
    <id>https://mtrsk.github.io/notes/2024/fallacies-of-distributed-computing/</id>
    <published>2024-10-09T00:00:00Z</published>
    <updated>2024-10-09T00:00:00Z</updated>
    <summary>:ID: 5a3ae2dc-5a54-4ba1-a638-f6090502d8ae
Between 1991 and 1997, engineers at Sun Microsystems collected a list of mistakes that programmers commonly make when writing software for networked computers. Bill Joy, Dave Lyon, L Peter Deutsch, and James Gosling cataloged eight assumptions that developers commonly hold about Distributed Systems. These assumptions, while obviously incorrect when stated explicitly, nevertheless inform many of the decisions that the Sun engineers found in systems of the day. (Perry 2020, 6)</summary>
    <content type="html">&lt;p&gt;:ID:       5a3ae2dc-5a54-4ba1-a638-f6090502d8ae&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Between 1991 and 1997, engineers at Sun Microsystems collected a list of
mistakes that programmers commonly make when writing software for networked
computers. Bill Joy, Dave Lyon, L Peter Deutsch, and James Gosling cataloged
eight assumptions that developers commonly hold about &lt;a href=&#34;/notes/2021/distributed-systems/&#34;&gt;Distributed Systems&lt;/a&gt;. These
assumptions, while obviously incorrect when stated explicitly, nevertheless
inform many of the decisions that the Sun engineers found in systems of the
day. (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Perry 2020, 6&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;The network is reliable&lt;/li&gt;
&lt;li&gt;Latency is zero&lt;/li&gt;
&lt;li&gt;Bandwidth is infinite&lt;/li&gt;
&lt;li&gt;The network is secure&lt;/li&gt;
&lt;li&gt;Topology doesn&amp;rsquo;t change&lt;/li&gt;
&lt;li&gt;There is one administrator&lt;/li&gt;
&lt;li&gt;Transport cost is zero&lt;/li&gt;
&lt;li&gt;The network is homogenous&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Perry, Michael L. 2020. &lt;i&gt;The Art of Immutable Architecture&lt;/i&gt;. Springer.&lt;/div&gt;
&lt;/div&gt;
</content>
    
    <category term="Fallacies"/>
    
    
    <category term="Distributed Systems"/>
    
  </entry>
  
  <entry>
    <title>Immutable Architectures</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/immutable-architectures/"/>
    <id>https://mtrsk.github.io/notes/2024/immutable-architectures/</id>
    <published>2024-10-09T00:00:00Z</published>
    <updated>2024-10-09T00:00:00Z</updated>
    <summary>:ID: 0fee39a3-5d70-4dfb-8603-7d50d8e4777e
Properties of a reliable application:
Idempotence Immutability Local Independence Versioning In 2015, Pat Helland wrote &amp;ldquo;Immutability Changes Everything&amp;rdquo;, an analysis of several computing solutions based on immutability. It demonstrates that immutability solves many problems in several layers of computational abstraction. (&amp;hellip;) . This paper claims no new ideas but only serves to point out the common thread of immutability in all of these solutions. (Perry 2020)
Forms of Immutable Architectures Name Definition Objects Things that change Records Things that do not change References Perry, Michael L.</summary>
    <content type="html">&lt;p&gt;:ID:       0fee39a3-5d70-4dfb-8603-7d50d8e4777e&lt;/p&gt;
&lt;p&gt;Properties of a reliable application:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Idempotence&lt;/li&gt;
&lt;li&gt;Immutability&lt;/li&gt;
&lt;li&gt;Local Independence&lt;/li&gt;
&lt;li&gt;Versioning&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;In 2015, Pat Helland wrote &amp;ldquo;Immutability Changes Everything&amp;rdquo;, an analysis of
several computing solutions based on immutability. It demonstrates that
immutability solves many problems in several layers of computational
abstraction. (&amp;hellip;) . This paper claims no new ideas but only serves to point out
the common thread of immutability in all of these solutions. (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Perry 2020&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;forms-of-immutable-architectures&#34;&gt;Forms of Immutable Architectures&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Definition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Objects&lt;/td&gt;
&lt;td&gt;Things that change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Records&lt;/td&gt;
&lt;td&gt;Things that do not change&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Perry, Michael L. 2020. &lt;i&gt;The Art of Immutable Architecture&lt;/i&gt;. Springer.&lt;/div&gt;
&lt;/div&gt;
</content>
    
    <category term="Immutable Architectures"/>
    
    
    <category term="Distributed Systems"/>
    
  </entry>
  
  <entry>
    <title>Management</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/management/"/>
    <id>https://mtrsk.github.io/notes/2024/management/</id>
    <published>2024-10-09T00:00:00Z</published>
    <updated>2024-10-09T00:00:00Z</updated>
    <summary>:ID: 1d989967-2878-40ab-827d-c4d1a91e0011
Books Managing A Programming Project The Effective Manager </summary>
    <content type="html">&lt;p&gt;:ID:       1d989967-2878-40ab-827d-c4d1a91e0011&lt;/p&gt;
&lt;h2 id=&#34;books&#34;&gt;Books&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/notes/2023/managing-a-programming-project/&#34;&gt;Managing A Programming Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/notes/2021/the-effective-manager/&#34;&gt;The Effective Manager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <category term="Management"/>
    
    
    <category term="Leadership"/>
    
  </entry>
  
  <entry>
    <title>Relational Theory</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/relational-theory/"/>
    <id>https://mtrsk.github.io/notes/2024/relational-theory/</id>
    <published>2024-10-09T00:00:00Z</published>
    <updated>2024-10-09T00:00:00Z</updated>
    <summary>:ID: abcb3048-34a5-4561-885c-74b8285924ac
It was late in 1968 that Codd, a mathematician by training, first realized that the discipline of mathematics could be used to inject some solid principles and rigor into a field, database management, that prior to that time was all too deficient in any such qualities. His original definition of the relational model appeared in an IBM Research Report in 1969 (&amp;hellip;) (Date 2015).
Date&amp;rsquo;s Review of Codd&amp;rsquo;s Original Algebra The relational model defines a database abstraction based on relations to avoid maintenance overhead.</summary>
    <content type="html">&lt;p&gt;:ID:       abcb3048-34a5-4561-885c-74b8285924ac&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It was late in 1968 that Codd, a mathematician by training, first realized that
the discipline of mathematics could be used to inject some solid principles and
rigor into a field, database management, that prior to that time was all too
deficient in any such qualities. His original definition of the relational model
appeared in an IBM Research Report in 1969 (&amp;hellip;) (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Date 2015&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;date-s-review-of-codd-s-original-algebra&#34;&gt;Date&amp;rsquo;s Review of Codd&amp;rsquo;s Original Algebra&lt;/h2&gt;
&lt;p&gt;The relational model defines a database abstraction based on relations to avoid maintenance overhead. It
has three key ideas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Store database in simple data structures (relations).&lt;/li&gt;
&lt;li&gt;Physical storage left up to the DBMS implementation.&lt;/li&gt;
&lt;li&gt;Access data through a high-level language, where the DBMS figures out best execution strategy.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;structure&#34;&gt;Structure&lt;/h3&gt;
&lt;p&gt;The definition of relations and their contents independent of their physical representation&lt;/p&gt;
&lt;h4 id=&#34;types--or-domains&#34;&gt;Types (or Domains)&lt;/h4&gt;
&lt;h4 id=&#34;n-ary-relations&#34;&gt;n-Ary Relations&lt;/h4&gt;
&lt;h4 id=&#34;attributes-and-tuples&#34;&gt;Attributes &amp;amp; Tuples&lt;/h4&gt;
&lt;h4 id=&#34;keys&#34;&gt;Keys&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;Candidate&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;Primary&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;Foreign&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;integrity&#34;&gt;Integrity&lt;/h3&gt;
&lt;p&gt;Ensure the database&amp;rsquo;s contents satisfy certain constraints&lt;/p&gt;
&lt;h4 id=&#34;entity-integrity&#34;&gt;Entity Integrity&lt;/h4&gt;
&lt;h4 id=&#34;referential-integrity&#34;&gt;Referential Integrity&lt;/h4&gt;
&lt;h3 id=&#34;manipulation&#34;&gt;Manipulation&lt;/h3&gt;
&lt;p&gt;Programming interface for accessing and modifying a database&amp;rsquo;s contents&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/notes/2024/relational-algebra/&#34;&gt;Relational Algebra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Relational Assignment&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Date, Chris J. 2015. &lt;i&gt;Sql and Relational Theory: How to Write Accurate Sql Code&lt;/i&gt;. O’Reilly Media, Inc.&lt;/div&gt;
&lt;/div&gt;
</content>
    
    <category term="Relational Theory"/>
    
    
    <category term="Databases"/>
    
  </entry>
  
  <entry>
    <title>The Two Generals Problem</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/the-two-generals-problem/"/>
    <id>https://mtrsk.github.io/notes/2024/the-two-generals-problem/</id>
    <published>2024-10-09T00:00:00Z</published>
    <updated>2024-10-09T00:00:00Z</updated>
    <summary>:ID: e9403288-b149-474c-928f-02e52e7cf78a
The Two Generals&amp;rsquo; Problem is a classic unsolvable problem in Distributed Systems, first formulated by (Akkoyunlu, Ekanadham, and Huber 1975) and later described by .
References Akkoyunlu, Eralp A, Kattamuri Ekanadham, and Richard V Huber. 1975. “Some Constraints and Tradeoffs in the Design of Network Communications.” In Proceedings of the Fifth Acm Symposium on Operating Systems Principles, 67–74. </summary>
    <content type="html">&lt;p&gt;:ID:       e9403288-b149-474c-928f-02e52e7cf78a&lt;/p&gt;
&lt;p&gt;The Two Generals&amp;rsquo; Problem is a classic unsolvable problem in &lt;a href=&#34;/notes/2021/distributed-systems/&#34;&gt;Distributed Systems&lt;/a&gt;, first formulated by (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Akkoyunlu, Ekanadham, and Huber 1975&lt;/a&gt;) and later described by .&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Akkoyunlu, Eralp A, Kattamuri Ekanadham, and Richard V Huber. 1975. “Some Constraints and Tradeoffs in the Design of Network Communications.” In &lt;i&gt;Proceedings of the Fifth Acm Symposium on Operating Systems Principles&lt;/i&gt;, 67–74.&lt;/div&gt;
&lt;/div&gt;
</content>
    
    <category term="Classical Papers"/>
    
    
    <category term="Distributed Systems"/>
    
  </entry>
  
  <entry>
    <title>Haskell</title>
    <link rel="alternate" href="https://mtrsk.github.io/notes/2024/haskell/"/>
    <id>https://mtrsk.github.io/notes/2024/haskell/</id>
    <published>2024-10-08T00:00:00Z</published>
    <updated>2024-10-08T00:00:00Z</updated>
    <summary>:ID: a74d6aac-dbe9-48a6-83ca-648cd6ea933e
Haskell is a general purpose, purely Functional Programming language incorporating many recent innovations in programming language design. Haskell provides higher-order functions, non-strict semantics, static polymorphic typing, user-defined algebraic datatypes, pattern-matching, list comprehensions, a module system, a monadic I/O system, and a rich set of primitive datatypes, including lists, arrays, arbitrary and fixed precision integers, and floating-point numbers. Haskell is both the culmination and solidification of many years of research on non-strict functional languages.</summary>
    <content type="html">&lt;p&gt;:ID:       a74d6aac-dbe9-48a6-83ca-648cd6ea933e&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Haskell is a general purpose, purely &lt;a href=&#34;/notes/2024/functional-programming/&#34;&gt;Functional Programming&lt;/a&gt; language
incorporating many recent innovations in programming language design. Haskell
provides higher-order functions, non-strict semantics, static polymorphic
typing, user-defined algebraic datatypes, pattern-matching, list comprehensions,
a module system, a monadic I/O system, and a rich set of primitive datatypes,
including lists, arrays, arbitrary and fixed precision integers, and
floating-point numbers. Haskell is both the culmination and solidification of
many years of research on non-strict functional languages.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <category term="Haskell"/>
    
    
    <category term="Functional Programming"/>
    
  </entry>
  
</feed>
