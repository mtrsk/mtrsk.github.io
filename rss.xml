<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>homepage title on Benevides&#39; Blog</title>
    <link>https://mtrsk.github.io/</link>
    <description>Recent content in homepage title on Benevides&#39; Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 06 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mtrsk.github.io/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introducing Erlang: Getting Started in Functional Programming</title>
      <link>https://mtrsk.github.io/notes/2024/introducing-erlang/</link>
      <pubDate>Sat, 06 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/notes/2024/introducing-erlang/</guid>
      <description>:ID: f5e7bb90-792d-406a-8c40-2b072db63a13&#xA;Chapter 1: Getting Comfortable Numbers in Erlang If you need to do calculations on integers using a base other than 10, you can use Base#Value notation.&#xA;Seeing Your Bound Variables b() shows all bound variables in the current erlang shell.&#xA;&amp;gt; b(). N = 1 Number = 5 Clearing Bound Variables in the Shell &amp;gt; f(N). &amp;gt; f(). Chapter 2: Functions and Modules Defining Modules -module(drop). -export([fall_velocity/1, mps_to_mph/1, mps_to_kph/1]).</description>
    </item>
    <item>
      <title>Programming Erlang: Software for a Concurrent World</title>
      <link>https://mtrsk.github.io/notes/2024/programming-erlang-software-for-a-concurrent-world/</link>
      <pubDate>Sat, 06 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/notes/2024/programming-erlang-software-for-a-concurrent-world/</guid>
      <description>:ID: 1daea4ea-40bc-406d-8d03-906c7f9ec343 :ROAM_ALIASES: &amp;ldquo;Erlang&amp;rdquo;&#xA;Part I: Why Erlang? Introducing Concurrency Modeling Concurrency spawn is an Erlang primitive that creates a concurrent process and returns a process identifier (PID) that can used to interact with the newly created process:&#xA;spawn(ModName, FuncName, [Arg1, Arg2, ..., ArgN]) The syntax Pid ! Msg means &amp;ldquo;send the message Msg to the process Pid&amp;rdquo;. And for Pid to process a message we need to pattern match:</description>
    </item>
    <item>
      <title>Erlang</title>
      <link>https://mtrsk.github.io/notes/2024/erlang/</link>
      <pubDate>Wed, 19 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/notes/2024/erlang/</guid>
      <description>:ID: de7d0e94-618f-4982-b3e5-8806d88cad5d&#xA;Resources:&#xA;Etudes for Erlang (Laurent 2017): Notes from [BROKEN LINK: f5e7bb90-792d-406a-8c40-2b072db63a13] (Armstrong 2013): Notes from [BROKEN LINK: 1daea4ea-40bc-406d-8d03-906c7f9ec343] References Armstrong, Joe. 2013. “Programming Erlang: Software for a Concurrent World.” Laurent, Simon St. 2017. Introducing Erlang: Getting Started in Functional Programming. O’Reilly Media, Inc. </description>
    </item>
    <item>
      <title>Monad</title>
      <link>https://mtrsk.github.io/notes/2024/monad/</link>
      <pubDate>Wed, 19 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/notes/2024/monad/</guid>
      <description>:ID: a3e972e0-8db9-4556-9dca-0e4f6a663236&#xA;Haskell class Monad m where (&amp;gt;&amp;gt;=) :: m a -&amp;gt; ( a -&amp;gt; m b) -&amp;gt; m b (&amp;gt;&amp;gt;) :: m a -&amp;gt; m b -&amp;gt; m b return :: a -&amp;gt; m a Name Handles Signature Result Errors Either e a -&amp;gt; (a -&amp;gt; Either e b) -&amp;gt; Either e b Maybe Absent values Maybe a -&amp;gt; (a -&amp;gt; Maybe b) -&amp;gt; Maybe b IO Pure/Impure separation IO a -&amp;gt; (a -&amp;gt; IO b) -&amp;gt; IO b State Monadic State State a -&amp;gt; (a -&amp;gt; State b) -&amp;gt; State b Reader Environment Data Reader a -&amp;gt; (a -&amp;gt; Reader b) -&amp;gt; Reader b Writer Writer-Only Data Writer a -&amp;gt; (a -&amp;gt; Writer b) -&amp;gt; Writer b Parser Composing Parsers Parser a -&amp;gt; (a -&amp;gt; Parser b) -&amp;gt; Parser b </description>
    </item>
    <item>
      <title>Monoid</title>
      <link>https://mtrsk.github.io/notes/2023/monoid/</link>
      <pubDate>Sun, 08 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/notes/2023/monoid/</guid>
      <description>:ID: d89285be-d7a9-46a1-8a10-e14e73b66935&#xA;Definition A monoid is triple \(\left (\mathbb{M}, \cdot, 1 \right)\) such that:&#xA;\(\mathbb{M}\) is an non-empty set \(\cdot : \mathbb{M} \times \mathbb{M} \rightarrow \mathbb{M}\) is an associative mapping, i.e., \(\forall t_1, t_2, t_3 \in \mathbb{M}, (t_1 \cdot t_2) \cdot t_3 = t_1 \cdot (t_2 \cdot t_3)\). \(1 \in \mathbb{M}\) is the unit satisfying \(1 \cdot t = t = t \cdot 1, \forall t \in \mathbb{M}\). </description>
    </item>
    <item>
      <title>Abelian Group</title>
      <link>https://mtrsk.github.io/notes/2023/abelian-group/</link>
      <pubDate>Sat, 07 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/notes/2023/abelian-group/</guid>
      <description>:ID: 6550857e-ec3f-4b76-80ce-9b86df92601e</description>
    </item>
    <item>
      <title>Commutative Ring</title>
      <link>https://mtrsk.github.io/notes/2023/commutative-ring/</link>
      <pubDate>Sat, 07 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/notes/2023/commutative-ring/</guid>
      <description>:ID: 44839048-b783-4a37-9267-b8e59160d90f</description>
    </item>
    <item>
      <title>Left R-Module</title>
      <link>https://mtrsk.github.io/notes/2023/left-r-module/</link>
      <pubDate>Sat, 07 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/notes/2023/left-r-module/</guid>
      <description>:ID: e4bd8f7b-a64d-4da3-b1e8-289d6fb0c441&#xA;Formal Definition Suppose that R is a ring, and 1 is its multiplicative identity. A left R-module M consists of an abelian group (M, +) and an operation · : R × M → M such that ∀ r, s ∈ R and x, y ∈ M, we have:&#xA;\begin{align*} r \cdot (x + y) &amp;amp;= r \cdot x + r \cdot y \tag{1}\\ (r + s) \cdot x &amp;amp;= r \cdot x + s \cdot x \tag{2}\\ (r \cdot s) \cdot x &amp;amp;= r \cdot (s \cdot x) \tag{3}\\ 1 \cdot x &amp;amp;= x \tag{4} \end{align*}</description>
    </item>
    <item>
      <title>R-Module Homomorphism</title>
      <link>https://mtrsk.github.io/notes/2023/r-module-homomorphism/</link>
      <pubDate>Sat, 07 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/notes/2023/r-module-homomorphism/</guid>
      <description>:ID: e41608f8-fcf2-4b02-b502-9441c0aee369</description>
    </item>
    <item>
      <title>Algebraic Models for Accouting Systems</title>
      <link>https://mtrsk.github.io/notes/2023/algebraic-models-for-accouting-systems/</link>
      <pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/notes/2023/algebraic-models-for-accouting-systems/</guid>
      <description>:ID: 9a03d556-ded4-4096-9a8c-c2147dee70a5 :ROAM_ALIASES: &amp;ldquo;Algebra&amp;rdquo;&#xA;Algebraic Models for Accouting Systems&#xA;Approaches to Accounting Theory Algebraic concepts employed Balance vectors&#xA;A balance vector is a column vector or column matrix the sum of whose entries equals zero. Balance vectors are able to represent the state of an accounting system at any instant. They are also capable of encoding the transactions that are applied to the system. Digraph&#xA;The vertices represent accounts and the edges indicate where there are flows of value within the system.</description>
    </item>
    <item>
      <title>How to use private NeoVim plugins on NixOS</title>
      <link>https://mtrsk.github.io/blog/2023/how-to-use-private-neovim-plugins-on-nixos/</link>
      <pubDate>Sun, 17 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/blog/2023/how-to-use-private-neovim-plugins-on-nixos/</guid>
      <description>Over time my config changed a lot since the early days, as of now I&amp;rsquo;m using a combination of Flakes and home-manager to manage my workstations. I try not to overthink too much when it comes to Nix, my current Neovim setup is pretty simple, lua-based, yet, fully nixified.&#xA;dotfiles ├── (...) ├── nvim │ ├── files.lua │ ├── line.lua │ ├── lsp.lua │ ├── settings.lua │ ├── tabs.lua │ └── treesitter.</description>
    </item>
    <item>
      <title>Managing a Programming Project</title>
      <link>https://mtrsk.github.io/notes/2023/managing-a-programming-project/</link>
      <pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/notes/2023/managing-a-programming-project/</guid>
      <description>:ID: da4d5031-66cb-4d1c-b8cf-24d12adf5c17&#xA;Introduction Your ground rules Adopt a set of unambiguous definitions and stick with them Define your project&amp;rsquo;s development cycle and related all schedules and work process to that cycle Define activities, such as levels of testing, in a consistent way Define a system of documents clearly, consistent and early Your contract Half the horror stories about programming involve either bad contracts or no contract at all&#xA;The fact that you are managing a programming project means that you will be running a business.</description>
    </item>
    <item>
      <title>Distributed Systems</title>
      <link>https://mtrsk.github.io/notes/2021/distributed-systems/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/notes/2021/distributed-systems/</guid>
      <description>:ID: d7efb05f-fb8f-438c-b09d-ea91dc24ebc3&#xA;Readings from the following books:&#xA;Michael L. Perry&amp;rsquo;s &amp;ldquo;The Art of Immutable Architecture&amp;rdquo;. Properties of a reliable application&#xA;Idempotence Immutability Local Independence Versioning Why Immutable Architecture ..if you are in architecture, you are responsible for cutting the Gordian Knot of possible failures and mitigations. This is the fragile process by which we build the systems that run our society.&#xA;The Problems with Immutability It&amp;rsquo;s not how machines actually operate, i.</description>
    </item>
    <item>
      <title>History of Logic: From Aristotle to Taski</title>
      <link>https://mtrsk.github.io/notes/2021/history-of-logic-from-aristotle-to-taski/</link>
      <pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/notes/2021/history-of-logic-from-aristotle-to-taski/</guid>
      <description>:ID: 0c082d02-4771-4860-8119-83b263c00ff3&#xA;Notes from the book &amp;ldquo;History of Logic: from Aristotle to Tarski&amp;rdquo;.&#xA;Intro Roughly speaking, the development of logic in Europe has had three &amp;ldquo;golden ages&amp;rdquo;:&#xA;Greek period, from around 350 to 200 BCE and included thinkers like: Aristotle Diodoru Cronus Chrysippus High medieval period, from around 1100 to 1400 Modern period, from around 1850 up to the present day The Greek period From the beginning of the Greek golden period we get many anticipations of later developments.</description>
    </item>
    <item>
      <title>I&#39;ve Switched to NixOS</title>
      <link>https://mtrsk.github.io/blog/2018/ive-switched-to-nixos/</link>
      <pubDate>Fri, 17 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/blog/2018/ive-switched-to-nixos/</guid>
      <description>After quite some time being a Debian user I&amp;rsquo;ve decided to become a full time meme distro user. At first I was following some of the manuals in an attempt to recreate my config in virtualbox. A day later this distro seemed too cool not to try it out for real, so why not?&#xA;It&amp;rsquo;s kinda weird to adapt, in Debian I was accostumed to just run a command here and there and have a bunch of config files across my system, with Nix (the configuration language) one can have a single file (configuration.</description>
    </item>
    <item>
      <title>Blogroll</title>
      <link>https://mtrsk.github.io/blogroll/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/blogroll/</guid>
      <description>This page is a rendered version of my OPML file.</description>
    </item>
  </channel>
</rss>
