<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Haskell on Benevides&#39; Blog</title>
    <link>https://mtrsk.github.io/tags/haskell/</link>
    <description>Recent content in Haskell on Benevides&#39; Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Oct 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mtrsk.github.io/tags/haskell/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Haskell</title>
      <link>https://mtrsk.github.io/notes/2024/haskell/</link>
      <pubDate>Tue, 08 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/notes/2024/haskell/</guid>
      <description>:ID: a74d6aac-dbe9-48a6-83ca-648cd6ea933e&#xA;Haskell is a general purpose, purely Functional Programming language incorporating many recent innovations in programming language design. Haskell provides higher-order functions, non-strict semantics, static polymorphic typing, user-defined algebraic datatypes, pattern-matching, list comprehensions, a module system, a monadic I/O system, and a rich set of primitive datatypes, including lists, arrays, arbitrary and fixed precision integers, and floating-point numbers. Haskell is both the culmination and solidification of many years of research on non-strict functional languages.</description>
    </item>
    <item>
      <title>Monad</title>
      <link>https://mtrsk.github.io/notes/2024/monad/</link>
      <pubDate>Wed, 19 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/notes/2024/monad/</guid>
      <description>:ID: a3e972e0-8db9-4556-9dca-0e4f6a663236&#xA;Haskell In Haskell, monads are defined as:&#xA;class Monad m where (&amp;gt;&amp;gt;=) :: m a -&amp;gt; ( a -&amp;gt; m b) -&amp;gt; m b (&amp;gt;&amp;gt;) :: m a -&amp;gt; m b -&amp;gt; m b return :: a -&amp;gt; m a Name Handles Signature Result Errors Either e a -&amp;gt; (a -&amp;gt; Either e b) -&amp;gt; Either e b Maybe Absent values Maybe a -&amp;gt; (a -&amp;gt; Maybe b) -&amp;gt; Maybe b IO Pure/Impure separation IO a -&amp;gt; (a -&amp;gt; IO b) -&amp;gt; IO b State Monadic State State a -&amp;gt; (a -&amp;gt; State b) -&amp;gt; State b Reader Environment Data Reader a -&amp;gt; (a -&amp;gt; Reader b) -&amp;gt; Reader b Writer Writer-Only Data Writer a -&amp;gt; (a -&amp;gt; Writer b) -&amp;gt; Writer b Parser Composing Parsers Parser a -&amp;gt; (a -&amp;gt; Parser b) -&amp;gt; Parser b </description>
    </item>
    <item>
      <title>Monoid</title>
      <link>https://mtrsk.github.io/notes/2023/monoid/</link>
      <pubDate>Sun, 08 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://mtrsk.github.io/notes/2023/monoid/</guid>
      <description>:ID: d89285be-d7a9-46a1-8a10-e14e73b66935 :EXPORT_HUGO_CATEGORIES: &amp;ldquo;Math&amp;rdquo; &amp;ldquo;FP&amp;rdquo; :EXPORT_HUGO_TAGS: &amp;ldquo;Algebra&amp;rdquo; &amp;ldquo;Haskell&amp;rdquo;&#xA;Definition A monoid is triple \(\left (\mathbb{M}, \cdot, 1 \right)\) such that:&#xA;\(\mathbb{M}\) is an non-empty set \(\cdot : \mathbb{M} \times \mathbb{M} \rightarrow \mathbb{M}\) is an associative mapping, i.e., \(\forall t_1, t_2, t_3 \in \mathbb{M}, (t_1 \cdot t_2) \cdot t_3 = t_1 \cdot (t_2 \cdot t_3)\). \(1 \in \mathbb{M}\) is the unit satisfying \(1 \cdot t = t = t \cdot 1, \forall t \in \mathbb{M}\).</description>
    </item>
  </channel>
</rss>
