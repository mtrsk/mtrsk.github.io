<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OTP on Benevides&#39; Blog</title>
    <link>https://schonfinkel.github.io/tags/otp/</link>
    <description>Recent content in OTP on Benevides&#39; Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://schonfinkel.github.io/tags/otp/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gen Event</title>
      <link>https://schonfinkel.github.io/notes/2024/gen-event/</link>
      <pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://schonfinkel.github.io/notes/2024/gen-event/</guid>
      <description>:ID: 0372baa6-420e-483a-9621-7f80f1ad6974&#xA;Events are continuously being generated in the system, and Otp provides a framework for creating event streams and for hooking up handlers to act on the generated events. This framework is the foundation of the standard Otp Logging system. (Logan, Merritt, and Carlsson 2010, 170)&#xA;References Logan, Martin, Eric Merritt, and Richard Carlsson. 2010. Erlang and Otp in Action. Manning Publications Co. </description>
    </item>
    <item>
      <title>Otp Logging</title>
      <link>https://schonfinkel.github.io/notes/2024/otp-logging/</link>
      <pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://schonfinkel.github.io/notes/2024/otp-logging/</guid>
      <description>:ID: b9d1f9ae-ba8a-4290-b86a-ff8c812de23a</description>
    </item>
    <item>
      <title>Mnesia</title>
      <link>https://schonfinkel.github.io/notes/2024/mnesia/</link>
      <pubDate>Tue, 17 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://schonfinkel.github.io/notes/2024/mnesia/</guid>
      <description>:ID: 568e0595-4bf0-40b5-981f-fd0aa9312785&#xA;Mnesia is a database management system (DBMS) that comes with Erlang. It uses the Erlang Term Storage and DETS underneath, but provides many more features than those components.&#xA;Creating the initial Database mnesia:create_schema([node()]) By default, Mnesia will store your table in RAM only (ram_copies) on the current node. This is speedy, but it means the data vanishes if the node crashes. If you specify disc_copies (note the spelling), Mnesia will keep a copy of the database on disk, but still use RAM for speed.</description>
    </item>
    <item>
      <title>Supervisor</title>
      <link>https://schonfinkel.github.io/notes/2024/supervisor/</link>
      <pubDate>Sun, 13 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://schonfinkel.github.io/notes/2024/supervisor/</guid>
      <description>:ID: 2daf1307-afb4-49e4-98cb-66ac7eb27cf0&#xA;Supervisors are one of the most important features of Otp. They monitor other processes and take action if anything goes wrong, restarting the failed process or possibly escalating the problem to a higher level. Layering supervisors into supervision trees allows you to create highly fault-tolerant systems. (Logan, Merritt, and Carlsson 2010)&#xA;A simple-one-for-one supervisor hierarchy. All the child processes are of the same type and are added or removed dynamically.</description>
    </item>
    <item>
      <title>Erlang Term Storage</title>
      <link>https://schonfinkel.github.io/notes/2024/erlang-term-storage/</link>
      <pubDate>Thu, 10 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://schonfinkel.github.io/notes/2024/erlang-term-storage/</guid>
      <description>:ID: 37c6ea44-0c80-4c57-a36e-98d37e8a3413 :ROAM_ALIAS: &amp;ldquo;ETS&amp;rdquo;&#xA;Erlang Term Storage, commonly referred to as ETS, is a powerful storage engine built into Otp. Every entry in an ETS table is a tuple (or corresponding record), and one piece of the tuple is designated the key.&#xA;ETS can hold four kinds of collections (Laurent 2017, 141):&#xA;Sets (set): Can contain only one entry with a given key. Ordered Sets (ordered_set): Same as a set, but also maintains a traversal order based on the keys.</description>
    </item>
    <item>
      <title>Gen Server</title>
      <link>https://schonfinkel.github.io/notes/2024/gen-server/</link>
      <pubDate>Thu, 10 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://schonfinkel.github.io/notes/2024/gen-server/</guid>
      <description>:ID: 1cd8fd81-a7c4-44ea-8b7a-d803e9b491af&#xA;Much of the work you think of as the core of a program - calculating results, storing information, and preparing replies - will fit neatly into the gen_server behavior. It provides a core set of methods that let you set up a process, respond to requests, end the process gracefully, and even pass state to a new process if this one needs to be upgraded in place. (Laurent 2017, 148)</description>
    </item>
    <item>
      <title>Otp</title>
      <link>https://schonfinkel.github.io/notes/2024/otp/</link>
      <pubDate>Sat, 28 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://schonfinkel.github.io/notes/2024/otp/</guid>
      <description>:ID: 6ed3a191-0128-453e-b0b6-37c48593a6f0 :ROAM_ALIAS: &amp;ldquo;Open Telecom Platform&amp;rdquo;&#xA;Otp is a domain-independent set of frameworks, principles, and patterns that guide and support the structure, design, implementation, and deployment of Erlang systems. Using OTP in your projects will help you avoid accidental complexity: things that are difficult because you picked inadequate tools. (Cesarini and Vinoski 2016, 20)&#xA;Behaviors Behaviours are a way of formalizing common patterns in process-oriented programming. For example, the concept of a server is general and includes a large portion of all processes you’ll ever need to write.</description>
    </item>
    <item>
      <title>Designing For Scalability With Erlang</title>
      <link>https://schonfinkel.github.io/notes/2024/designing-for-scalability-with-erlang/</link>
      <pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://schonfinkel.github.io/notes/2024/designing-for-scalability-with-erlang/</guid>
      <description>:ID: ffac18bd-4e44-4a7b-8a3a-a85552c9b076&#xA;Otp is said to consist of three building blocks that, when used together, provide a solid approach to designing and developing systems in the problem domain we’ve just described. They are Erlang itself, tools and libraries, and a set of design principles. (Cesarini and Vinoski 2016, 20)&#xA;References Cesarini, Francesco, and Steve Vinoski. 2016. Designing for Scalability with Erlang/Otp: Implement Robust, Fault-Tolerant Systems. O’Reilly Media, Inc. </description>
    </item>
  </channel>
</rss>
